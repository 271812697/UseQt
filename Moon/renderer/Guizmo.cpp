#include "Guizmo.h"
#include "glutil/util.h"
#include <glad/glad.h>

namespace MOON {
	constexpr unsigned int Id_Invalid = 0;

	static constexpr unsigned int kFnv1aPrime32 = 0x01000193u;
	static Eigen::Vector4<uint8_t> Color_Gold = Eigen::Vector4<uint8_t>(255, 0, 215, 255);// Color(0xffd700ff);
	struct Line
	{
		Eigen::Vector3<float> m_origin;
		Eigen::Vector3<float> m_direction; // unit length

		Line() {}
		Line(const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _direction) : m_origin(_origin)
			, m_direction(_direction)
		{
		}
	};
	struct Ray
	{
		Eigen::Vector3<float> m_origin;
		Eigen::Vector3<float> m_direction; // unit length

		Ray() {}
		Ray(const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _direction) : m_origin(_origin)
			, m_direction(_direction)
		{
		}
	};
	struct LineSegment
	{
		Eigen::Vector3<float> m_start;
		Eigen::Vector3<float> m_end;

		LineSegment() {}
		LineSegment(const Eigen::Vector3<float>& _start, const Eigen::Vector3<float>& _end) : m_start(_start)
			, m_end(_end)
		{
		}
	};
	struct Sphere
	{
		Eigen::Vector3<float>  m_origin;
		float m_radius;

		Sphere() {}
		Sphere(const Eigen::Vector3<float>& _origin, float _radius) : m_origin(_origin)
			, m_radius(_radius)
		{
		}
	};
	struct Plane
	{
		Eigen::Vector3<float>  m_normal;
		float m_offset;

		Plane() {}
		Plane(const Eigen::Vector3<float>& _normal, float _offset) : m_normal(_normal)
			, m_offset(_offset)
		{
		}
		Plane(const Eigen::Vector3<float>& _normal, const Eigen::Vector3<float>& _origin) : m_normal(_normal)
			, m_offset(_normal.dot(_origin))
		{
		}
	};
	struct Capsule
	{
		Eigen::Vector3<float>  m_start;
		Eigen::Vector3<float>  m_end;
		float m_radius;

		Capsule() {}
		Capsule(const Eigen::Vector3<float>& _start, const Eigen::Vector3<float>& _end, float _radius) : m_start(_start)
			, m_end(_end)
			, m_radius(_radius)
		{
		}
	};

	// Ray-primitive intersections. Use Intersects() when you don't need t.
	bool  Intersects(const Ray& _ray, const Plane& _plane);
	bool  Intersect(const Ray& _ray, const Plane& _plane, float& t0_);
	bool  Intersects(const Ray& _ray, const Sphere& _sphere);
	bool  Intersect(const Ray& _ray, const Sphere& _sphere, float& t0_, float& t1_);
	bool  Intersects(const Ray& _ray, const Capsule& _capsule);
	bool  Intersect(const Ray& _ray, const Capsule& _capsule, float& t0_, float& t1_);

	// Find point t0_ along _line0 nearest to _line1 and t1_ along _line1 nearest to _line0.
	void  Nearest(const Line& _line0, const Line& _line1, float& t0_, float& t1_);
	// Find point tr_ along _ray nearest to _line and tl_ along _line nearest to _ray.
	void  Nearest(const Ray& _ray, const Line& _line, float& tr_, float& tl_);
	// Find point tr_ along _ray nearest to _segment, return point on segment nearest to _ray.
	Eigen::Vector3<float>  Nearest(const Ray& _ray, const LineSegment& _segment, float& tr_);

	float Distance2(const Ray& _ray, const LineSegment& _segment);

	inline float Distance(const Eigen::Vector4<float>& _plane, const Eigen::Vector3<float>& _point) { return _plane.x() * _point.x() + _plane.y() * _point.y() + _plane.z() * _point.z() - _plane.w(); }

	constexpr float Pi = 3.14159265359f;
	constexpr float TwoPi = 2.0f * Pi;
	constexpr float HalfPi = 0.5f * Pi;

	inline float Radians(float _degrees) { return _degrees * (Pi / 180.0f); }
	inline float Degrees(float _radians) { return _radians * (180.0f / Pi); }



	bool Intersects(const Ray& _ray, const Plane& _plane)
	{
		float x = _plane.m_normal.dot(_ray.m_direction);
		return x <= 0.0f;
	}
	bool Intersect(const Ray& _ray, const Plane& _plane, float& t0_)
	{
		t0_ = _plane.m_normal.dot((_plane.m_normal * _plane.m_offset) - _ray.m_origin) / _plane.m_normal.dot(_ray.m_direction);
		return t0_ >= 0.0f;
	}
	bool Intersects(const Ray& _r, const Sphere& _s)
	{
		Eigen::Vector3<float> p = _s.m_origin - _r.m_origin;
		float p2 = p.squaredNorm();
		float q = p.dot(_r.m_direction);
		float r2 = _s.m_radius * _s.m_radius;
		if (q < 0.0f && p2 > r2)
		{
			return false;
		}

		return p2 - (q * q) <= r2;
	}
	bool Intersect(const Ray& _r, const Sphere& _s, float& t0_, float& t1_)
	{
		Eigen::Vector3<float> p = _s.m_origin - _r.m_origin;
		float q = p.dot(_r.m_direction);
		if (q < 0.0f)
		{
			return false;
		}

		float p2 = p.squaredNorm() - q * q;
		float r2 = _s.m_radius * _s.m_radius;
		if (p2 > r2)
		{
			return false;
		}

		float s = sqrtf(r2 - p2);
		t0_ = std::max(q - s, 0.0f);
		t1_ = q + s;

		return true;
	}
	bool Intersects(const Ray& _ray, const Capsule& _capsule)
	{
		return Distance2(_ray, LineSegment(_capsule.m_start, _capsule.m_end)) < _capsule.m_radius * _capsule.m_radius;
	}
	bool Intersect(const Ray& _ray, const Capsule& _capsule, float& t0_, float& t1_)
	{
		//IM3D_ASSERT(false); // \todo implement
		t0_ = t1_ = 0.0f;
		return Intersects(_ray, _capsule);
	}

	void Nearest(const Line& _line0, const Line& _line1, float& t0_, float& t1_)
	{
		Eigen::Vector3<float> p = _line0.m_origin - _line1.m_origin;
		float q = _line0.m_direction.dot(_line1.m_direction);
		float s = _line1.m_direction.dot(p);

		float d = 1.0f - q * q;
		if (d < FLT_EPSILON) // lines are parallel
		{
			t0_ = 0.0f;
			t1_ = s;
		}
		else
		{
			float r = _line0.m_direction.dot(p);
			t0_ = (q * s - r) / d;
			t1_ = (s - q * r) / d;
		}
	}
	void Nearest(const Ray& _ray, const Line& _line, float& tr_, float& tl_)
	{
		Nearest(Line(_ray.m_origin, _ray.m_direction), _line, tr_, tl_);
		tr_ = std::max(tr_, 0.0f);
	}
	Eigen::Vector3<float> Nearest(const Ray& _ray, const LineSegment& _segment, float& tr_)
	{
		Eigen::Vector3<float> ldir = _segment.m_end - _segment.m_start;
		Eigen::Vector3<float> p = _segment.m_start - _ray.m_origin;
		float q = ldir.squaredNorm();
		float r = ldir.dot(_ray.m_direction);
		float s = ldir.dot(p);
		float t = _ray.m_direction.dot(p);

		float sn, sd, tn, td;
		float denom = q - r * r;
		if (denom < FLT_EPSILON)
		{
			sd = td = 1.0f;
			sn = 0.0f;
			tn = t;
		}
		else
		{
			sd = td = denom;
			sn = r * t - s;
			tn = q * t - r * s;
			if (sn < 0.0f)
			{
				sn = 0.0f;
				tn = t;
				td = 1.0f;
			}
			else if (sn > sd)
			{
				sn = sd;
				tn = t + r;
				td = 1.0f;
			}
		}

		float ts;
		if (tn < 0.0f)
		{
			tr_ = 0.0f;
			if (r >= 0.0f)
			{
				ts = 0.0f;
			}
			else if (s <= q)
			{
				ts = 1.0f;
			}
			else
			{
				ts = -s / q;
			}
		}
		else
		{
			tr_ = tn / td;
			ts = sn / sd;
		}

		return _segment.m_start + ldir * ts;
	}
	float Distance2(const Ray& _ray, const LineSegment& _segment)
	{
		float tr;
		Eigen::Vector3<float> p = Nearest(_ray, _segment, tr);
		return (_ray.m_origin + _ray.m_direction * tr - p).squaredNorm();
	}

	Eigen::Matrix4f AlignZ(const  Eigen::Vector3<float>& _axis, const  Eigen::Vector3<float>& _up = Eigen::Vector3<float>(0.0f, 1.0f, 0.0f)) {
		Eigen::Vector3<float> x, y;
		y = _up - _axis * _up.dot(_axis);
		float ylen = y.norm();
		if (ylen < FLT_EPSILON)
		{
			Eigen::Vector3<float> k = Eigen::Vector3<float>(1.0f, 0.0f, 0.0f);
			y = k - _axis * k.dot(_axis);
			ylen = y.norm();
			if (ylen < FLT_EPSILON)
			{
				k = Eigen::Vector3<float>(0.0f, 0.0f, 1.0f);
				y = k - _axis * k.dot(_axis);
				ylen = y.norm();
			}
		}
		y = y / ylen;
		x = y.cross(_axis);
		Eigen::Matrix4f ret;
		ret.row(0) << x.x(), y.x(), _axis.x(), 0.0;
		ret.row(1) << x.y(), y.y(), _axis.y(), 0.0;
		ret.row(2) << x.z(), y.z(), _axis.z(), 0.0;
		ret.row(3) << 0.0, 0.0, 0.0, 1.0;
		return ret;


	}
	Eigen::Matrix4f LookAt(const  Eigen::Vector3<float>& _from, const  Eigen::Vector3<float>& _to, const  Eigen::Vector3<float>& _up = Eigen::Vector3<float>(0.0f, 1.0f, 0.0f)) {
		Eigen::Matrix4f ret = AlignZ((_to - _from).normalized(), _up);
		ret(0, 3) = _from.x(); // inject translation
		ret(1, 3) = _from.y();
		ret(2, 3) = _from.z();
		ret(3, 3) = 1.0f;
		return ret;
	}
	Eigen::Vector3<float> ToEulerXYZ(const Eigen::Matrix3f& _m)
	{

		Eigen::Vector3<float> ret;
		if (fabs(_m(2, 0)) < 1.0f)
		{
			ret(1) = -asinf(_m(2, 0));
			float c = 1.0f / cosf(ret.y());
			ret(0) = atan2f(_m(2, 1) * c, _m(2, 2) * c);
			ret(2) = atan2f(_m(1, 0) * c, _m(0, 0) * c);
		}
		else
		{
			ret(2) = 0.0f;
			if (!(_m(2, 0) > -1.0f))
			{
				ret(0) = ret(2) + atan2f(_m(0, 1), _m(0, 2));
				ret(1) = HalfPi;
			}
			else
			{
				ret(0) = -ret(2) + atan2f(-_m(0, 1), -_m(0, 2));
				ret(1) = -HalfPi;
			}
		}
		return ret;
	}
	Eigen::Matrix3f RotationMatrix(const Eigen::Vector3<float>& _axis, float _rads)
	{
		float c = cosf(_rads);
		float rc = 1.0f - c;
		float s = sinf(_rads);
		Eigen::Matrix3f ret;
		ret.row(0) << _axis.x() * _axis.x() + (1.0f - _axis.x() * _axis.x()) * c, _axis.x()* _axis.y()* rc - _axis.z() * s, _axis.x()* _axis.z()* rc + _axis.y() * s;
		ret.row(1) << _axis.x() * _axis.y() * rc + _axis.z() * s, _axis.y()* _axis.y() + (1.0f - _axis.y() * _axis.y()) * c, _axis.y()* _axis.z()* rc - _axis.x() * s;
		ret.row(2) << _axis.x() * _axis.z() * rc - _axis.y() * s, _axis.y()* _axis.z()* rc + _axis.x() * s, _axis.z()* _axis.z() + (1.0f - _axis.z() * _axis.z()) * c;
		return ret;
	}
	Eigen::Vector3<float> MatrixMulPoint(const Eigen::Matrix4f& matrix, const Eigen::Vector3<float>& point) {

		Eigen::Vector4<float>homeous = matrix * Eigen::Vector4<float>(point.x(), point.y(), point.z(), 1.0);
		return Eigen::Vector3<float>(homeous.x() / homeous.w(), homeous.y() / homeous.w(), homeous.z() / homeous.w());
	}
	inline static Eigen::Vector3<float> Snap(const Eigen::Vector3<float>& _val, float _snap)
	{
		if (_snap > 0.0f)
		{
			return Eigen::Vector3<float>(floorf(_val.x() / _snap) * _snap, floorf(_val.y() / _snap) * _snap, floorf(_val.z() / _snap) * _snap);
		}
		return _val;
	}
	inline static float Snap(float _val, float _snap)
	{
		if (_snap > 0.0f)
		{
			return floorf(_val / _snap) * _snap;
		}
		return _val;
	}
	inline static Eigen::Vector3<float> Snap(const Eigen::Vector3<float>& _pos, const Plane& _plane, float _snap)
	{
		if (_snap > 0.0f)
		{
			// get basis vectors on the plane
			Eigen::Matrix3f basis = AlignZ(_plane.m_normal).block(0, 0, 3, 3);
			Eigen::Vector3<float> i = basis.col(0);
			Eigen::Vector3<float> j = basis.col(1);

			// decompose _pos in terms of the basis vectors
			i = i * _pos.dot(i);
			j = j * _pos.dot(j);

			// snap the vector lengths
			float ilen = i.norm();
			float jlen = j.norm();

			if (ilen < 1e-7f || jlen < 1e-7f) // \hack prevent DBZ when _pos is 0
			{
				return _pos;
			}

			i = i / ilen;
			ilen = floorf(ilen / _snap) * _snap;
			i = i * ilen;
			j = j / jlen;
			jlen = floorf(jlen / _snap) * _snap;
			j = j * jlen;

			return i + j;
		}
		return _pos;
	}
	template <typename T>
	inline T Clamp(T _a, T _min, T _max) { return std::max(std::min(_a, _max), _min); }
	inline float Remap(float _x, float _start, float _end) { return Clamp(_x * (1.0f / (_end - _start)) + (-_start / (_end - _start)), 0.0f, 1.0f); }



	static float s_teapotVertices[] = { // vx,vy,vz, nx,ny,nz
	0.0479f,0.1900f,0.1425f, 0.2677f,0.4803f,0.8268f,  0.0466f,0.1963f,0.1386f, 0.2283f,0.6614f,0.7087f,  0.0000f,0.1963f,0.1460f, 0.0000f,0.6614f,0.7480f,  0.0000f,0.1900f,0.1500f, 0.0000f,0.4803f,0.8740f,  0.0453f,0.1995f,0.1348f, 0.1024f,0.9291f,0.3386f,  0.0000f,0.1995f,0.1420f, 0.0000f,0.9291f,0.3543f,  0.0444f,0.1995f,0.1320f, -0.1641f,0.8268f,-0.5234f,  0.0000f,0.1995f,0.1390f, 0.0000f,0.8268f,-0.5469f,  0.0440f,0.1963f,0.1311f, -0.3047f,0.0000f,-0.9453f,  0.0000f,0.1963f,0.1380f, 0.0000f,0.0000f,-1.0000f,  0.0447f,0.1900f,0.1330f, -0.2891f,-0.2969f,-0.9063f,  0.0000f,0.1900f,0.1400f, 0.0000f,-0.2969f,-0.9531f,  0.0891f,0.1900f,0.1214f, 0.5118f,0.4803f,0.7008f,  0.0867f,0.1963f,0.1181f, 0.4331f,0.6614f,0.5984f,  0.0843f,0.1995f,0.1149f, 0.2047f,0.9291f,0.2835f,  0.0826f,0.1995f,0.1125f, -0.3203f,0.8268f,-0.4453f,  0.0820f,0.1963f,0.1117f, -0.5859f,0.0000f,-0.8047f,  0.0831f,0.1900f,0.1133f, -0.5547f,-0.2969f,-0.7656f,  0.1214f,0.1900f,0.0891f, 0.7008f,0.4803f,0.5118f,  0.1181f,0.1963f,0.0867f, 0.5984f,0.6614f,0.4331f,  0.1149f,0.1995f,0.0843f, 0.2835f,0.9291f,0.2047f,  0.1125f,0.1995f,0.0826f, -0.4453f,0.8268f,-0.3203f,  0.1117f,0.1963f,0.0820f, -0.8047f,0.0000f,-0.5859f,  0.1133f,0.1900f,0.0831f, -0.7656f,-0.2969f,-0.5547f,  0.1425f,0.1900f,0.0479f, 0.8268f,0.4803f,0.2677f,  0.1386f,0.1963f,0.0466f, 0.7087f,0.6614f,0.2283f,  0.1348f,0.1995f,0.0453f, 0.3386f,0.9291f,0.1024f,  0.1320f,0.1995f,0.0444f, -0.5234f,0.8268f,-0.1641f,  0.1311f,0.1963f,0.0440f, -0.9453f,0.0000f,-0.3047f,  0.1330f,0.1900f,0.0447f, -0.9063f,-0.2969f,-0.2891f,  0.1500f,0.1900f,0.0000f, 0.8740f,0.4803f,0.0000f,  0.1460f,0.1963f,0.0000f, 0.7480f,0.6614f,0.0000f,  0.1420f,0.1995f,0.0000f, 0.3543f,0.9291f,0.0000f,  0.1390f,0.1995f,0.0000f, -0.5469f,0.8268f,0.0000f,  0.1380f,0.1963f,0.0000f, -1.0000f,0.0000f,0.0000f,  0.1400f,0.1900f,0.0000f, -0.9531f,-0.2969f,0.0000f,  -0.1425f,0.1900f,0.0479f, -0.8281f,0.4803f,0.2677f,  -0.1386f,0.1963f,0.0466f, -0.7109f,0.6614f,0.2283f,  -0.1460f,0.1963f,0.0000f, -0.7422f,0.6614f,0.0000f,  -0.1500f,0.1900f,0.0000f, -0.8750f,0.4803f,0.0000f,  -0.1348f,0.1995f,0.0453f, -0.3359f,0.9291f,0.1024f,  -0.1420f,0.1995f,0.0000f, -0.3516f,0.9291f,0.0000f,  -0.1320f,0.1995f,0.0444f, 0.5197f,0.8268f,-0.1641f,  -0.1390f,0.1995f,0.0000f, 0.5512f,0.8268f,0.0000f,  -0.1311f,0.1963f,0.0440f, 0.9449f,0.0000f,-0.3047f,  -0.1380f,0.1963f,0.0000f, 1.0000f,0.0000f,0.0000f,  -0.1330f,0.1900f,0.0447f, 0.9055f,-0.2969f,-0.2891f,  -0.1400f,0.1900f,0.0000f, 0.9528f,-0.2969f,0.0000f,  -0.1214f,0.1900f,0.0891f, -0.7031f,0.4803f,0.5118f,  -0.1181f,0.1963f,0.0867f, -0.6016f,0.6614f,0.4331f,  -0.1149f,0.1995f,0.0843f, -0.2813f,0.9291f,0.2047f,  -0.1125f,0.1995f,0.0826f, 0.4409f,0.8268f,-0.3203f,  -0.1117f,0.1963f,0.0820f, 0.8031f,0.0000f,-0.5859f,  -0.1133f,0.1900f,0.0831f, 0.7717f,-0.2969f,-0.5547f,  -0.0891f,0.1900f,0.1214f, -0.5078f,0.4803f,0.7008f,  -0.0867f,0.1963f,0.1181f, -0.4375f,0.6614f,0.5984f,  -0.0843f,0.1995f,0.1149f, -0.2031f,0.9291f,0.2835f,  -0.0826f,0.1995f,0.1125f, 0.3228f,0.8268f,-0.4453f,  -0.0820f,0.1963f,0.1117f, 0.5827f,0.0000f,-0.8047f,  -0.0831f,0.1900f,0.1133f, 0.5591f,-0.2969f,-0.7656f,  -0.0479f,0.1900f,0.1425f, -0.2656f,0.4803f,0.8268f,  -0.0466f,0.1963f,0.1386f, -0.2266f,0.6614f,0.7087f,  -0.0453f,0.1995f,0.1348f, -0.1094f,0.9291f,0.3386f,  -0.0444f,0.1995f,0.1320f, 0.1654f,0.8268f,-0.5234f,  -0.0440f,0.1963f,0.1311f, 0.3071f,0.0000f,-0.9453f,  -0.0447f,0.1900f,0.1330f, 0.2913f,-0.2969f,-0.9063f,  -0.0479f,0.1900f,-0.1425f, -0.2656f,0.4803f,-0.8281f,  -0.0466f,0.1963f,-0.1386f, -0.2266f,0.6614f,-0.7109f,  0.0000f,0.1963f,-0.1460f, 0.0000f,0.6614f,-0.7422f,  0.0000f,0.1900f,-0.1500f, 0.0000f,0.4803f,-0.8750f,  -0.0453f,0.1995f,-0.1348f, -0.1094f,0.9291f,-0.3359f,  0.0000f,0.1995f,-0.1420f, 0.0000f,0.9291f,-0.3516f,  -0.0444f,0.1995f,-0.1320f, 0.1654f,0.8268f,0.5197f,  0.0000f,0.1995f,-0.1390f, 0.0000f,0.8268f,0.5512f,  -0.0440f,0.1963f,-0.1311f, 0.3071f,0.0000f,0.9449f,  0.0000f,0.1963f,-0.1380f, 0.0000f,0.0000f,1.0000f,  -0.0447f,0.1900f,-0.1330f, 0.2913f,-0.2969f,0.9055f,  0.0000f,0.1900f,-0.1400f, 0.0000f,-0.2969f,0.9528f,  -0.0891f,0.1900f,-0.1214f, -0.5078f,0.4803f,-0.7031f,  -0.0867f,0.1963f,-0.1181f, -0.4375f,0.6614f,-0.6016f,  -0.0843f,0.1995f,-0.1149f, -0.2031f,0.9291f,-0.2813f,  -0.0826f,0.1995f,-0.1125f, 0.3228f,0.8268f,0.4409f,  -0.0820f,0.1963f,-0.1117f, 0.5827f,0.0000f,0.8031f,  -0.0831f,0.1900f,-0.1133f, 0.5591f,-0.2969f,0.7717f,  -0.1214f,0.1900f,-0.0891f, -0.7031f,0.4803f,-0.5078f,  -0.1181f,0.1963f,-0.0867f, -0.6016f,0.6614f,-0.4375f,  -0.1149f,0.1995f,-0.0843f, -0.2813f,0.9291f,-0.2031f,  -0.1125f,0.1995f,-0.0826f, 0.4409f,0.8268f,0.3228f,  -0.1117f,0.1963f,-0.0820f, 0.8031f,0.0000f,0.5827f,  -0.1133f,0.1900f,-0.0831f, 0.7717f,-0.2969f,0.5591f,  -0.1425f,0.1900f,-0.0479f, -0.8281f,0.4803f,-0.2656f,  -0.1386f,0.1963f,-0.0466f, -0.7109f,0.6614f,-0.2266f,  -0.1348f,0.1995f,-0.0453f, -0.3359f,0.9291f,-0.1094f,  -0.1320f,0.1995f,-0.0444f, 0.5197f,0.8268f,0.1654f,  -0.1311f,0.1963f,-0.0440f, 0.9449f,0.0000f,0.3071f,  -0.1330f,0.1900f,-0.0447f, 0.9055f,-0.2969f,0.2913f,  0.1425f,0.1900f,-0.0479f, 0.8268f,0.4803f,-0.2656f,  0.1386f,0.1963f,-0.0466f, 0.7087f,0.6614f,-0.2266f,  0.1348f,0.1995f,-0.0453f, 0.3386f,0.9291f,-0.1094f,  0.1320f,0.1995f,-0.0444f, -0.5234f,0.8268f,0.1654f,  0.1311f,0.1963f,-0.0440f, -0.9453f,0.0000f,0.3071f,  0.1330f,0.1900f,-0.0447f, -0.9063f,-0.2969f,0.2913f,  0.1214f,0.1900f,-0.0891f, 0.7008f,0.4803f,-0.5078f,  0.1181f,0.1963f,-0.0867f, 0.5984f,0.6614f,-0.4375f,  0.1149f,0.1995f,-0.0843f, 0.2835f,0.9291f,-0.2031f,  0.1125f,0.1995f,-0.0826f, -0.4453f,0.8268f,0.3228f,  0.1117f,0.1963f,-0.0820f, -0.8047f,0.0000f,0.5827f,  0.1133f,0.1900f,-0.0831f, -0.7656f,-0.2969f,0.5591f,  0.0891f,0.1900f,-0.1214f, 0.5118f,0.4803f,-0.7031f,  0.0867f,0.1963f,-0.1181f, 0.4331f,0.6614f,-0.6016f,  0.0843f,0.1995f,-0.1149f, 0.2047f,0.9291f,-0.2813f,  0.0826f,0.1995f,-0.1125f, -0.3203f,0.8268f,0.4409f,  0.0820f,0.1963f,-0.1117f, -0.5859f,0.0000f,0.8031f,  0.0831f,0.1900f,-0.1133f, -0.5547f,-0.2969f,0.7717f,  0.0479f,0.1900f,-0.1425f, 0.2677f,0.4803f,-0.8281f,  0.0466f,0.1963f,-0.1386f, 0.2283f,0.6614f,-0.7109f,  0.0453f,0.1995f,-0.1348f, 0.1024f,0.9291f,-0.3359f,  0.0444f,0.1995f,-0.1320f, -0.1641f,0.8268f,0.5197f,  0.0440f,0.1963f,-0.1311f, -0.3047f,0.0000f,0.9449f,  0.0447f,0.1900f,-0.1330f, -0.2891f,-0.2969f,0.9055f,  0.0638f,0.0400f,0.1900f, 0.3071f,-0.0469f,0.9449f,  0.0629f,0.0678f,0.1873f, 0.2992f,0.1732f,0.9291f,  0.0000f,0.0678f,0.1972f, 0.0000f,0.1732f,0.9843f,  0.0000f,0.0400f,0.2000f, 0.0000f,-0.0469f,0.9921f,  0.0605f,0.0971f,0.1801f, 0.2913f,0.2913f,0.9055f,  0.0000f,0.0971f,0.1896f, 0.0000f,0.2913f,0.9528f,  0.0569f,0.1275f,0.1694f, 0.2835f,0.3701f,0.8819f,  0.0000f,0.1275f,0.1784f, 0.0000f,0.3701f,0.9213f,  0.0526f,0.1586f,0.1565f, 0.2756f,0.4094f,0.8583f,  0.0000f,0.1586f,0.1648f, 0.0000f,0.4094f,0.9055f,  0.1188f,0.0400f,0.1619f, 0.5827f,-0.0469f,0.8031f,  0.1171f,0.0678f,0.1596f, 0.5748f,0.1732f,0.7953f,  0.1126f,0.0971f,0.1534f, 0.5591f,0.2913f,0.7717f,  0.1060f,0.1275f,0.1444f, 0.5433f,0.3701f,0.7480f,  0.0979f,0.1586f,0.1334f, 0.5276f,0.4094f,0.7323f,  0.1619f,0.0400f,0.1188f, 0.8031f,-0.0469f,0.5827f,  0.1596f,0.0678f,0.1171f, 0.7953f,0.1732f,0.5748f,  0.1534f,0.0971f,0.1126f, 0.7717f,0.2913f,0.5591f,  0.1444f,0.1275f,0.1060f, 0.7480f,0.3701f,0.5433f,  0.1334f,0.1586f,0.0979f, 0.7323f,0.4094f,0.5276f,  0.1900f,0.0400f,0.0638f, 0.9449f,-0.0469f,0.3071f,  0.1873f,0.0678f,0.0629f, 0.9291f,0.1732f,0.2992f,  0.1801f,0.0971f,0.0605f, 0.9055f,0.2913f,0.2913f,  0.1694f,0.1275f,0.0569f, 0.8819f,0.3701f,0.2835f,  0.1565f,0.1586f,0.0526f, 0.8583f,0.4094f,0.2756f,  0.2000f,0.0400f,0.0000f, 0.9921f,-0.0469f,0.0000f,  0.1972f,0.0678f,0.0000f, 0.9843f,0.1732f,0.0000f,  0.1896f,0.0971f,0.0000f, 0.9528f,0.2913f,0.0000f,  0.1784f,0.1275f,0.0000f, 0.9213f,0.3701f,0.0000f,  0.1648f,0.1586f,0.0000f, 0.9055f,0.4094f,0.0000f,  -0.1900f,0.0400f,0.0638f, -0.9453f,-0.0469f,0.3071f,  -0.1873f,0.0678f,0.0629f, -0.9297f,0.1732f,0.2992f,  -0.1972f,0.0678f,0.0000f, -0.9844f,0.1732f,0.0000f,  -0.2000f,0.0400f,0.0000f, -0.8516f,0.5197f,0.0000f,  -0.1801f,0.0971f,0.0605f, -0.9063f,0.2913f,0.2913f,  -0.1896f,0.0971f,0.0000f, -0.9531f,0.2913f,0.0000f,  -0.1694f,0.1275f,0.0569f, -0.8750f,0.3701f,0.2835f,  -0.1784f,0.1275f,0.0000f, -0.9219f,0.3701f,0.0000f,  -0.1565f,0.1586f,0.0526f, -0.8594f,0.4094f,0.2756f,  -0.1648f,0.1586f,0.0000f, -0.9063f,0.4094f,0.0000f,  -0.1619f,0.0400f,0.1188f, -0.8047f,-0.0469f,0.5827f,  -0.1596f,0.0678f,0.1171f, -0.7891f,0.1732f,0.5748f,  -0.1534f,0.0971f,0.1126f, -0.7656f,0.2913f,0.5591f,  -0.1444f,0.1275f,0.1060f, -0.7500f,0.3701f,0.5433f,  -0.1334f,0.1586f,0.0979f, -0.7344f,0.4094f,0.5276f,  -0.1188f,0.0400f,0.1619f, -0.5859f,-0.0469f,0.8031f,  -0.1171f,0.0678f,0.1596f, -0.5781f,0.1732f,0.7953f,  -0.1126f,0.0971f,0.1534f, -0.5547f,0.2913f,0.7717f,  -0.1060f,0.1275f,0.1444f, -0.5391f,0.3701f,0.7480f,  -0.0979f,0.1586f,0.1334f, -0.5313f,0.4094f,0.7323f,  -0.0638f,0.0400f,0.1900f, -0.3047f,-0.0469f,0.9449f,  -0.0629f,0.0678f,0.1873f, -0.2969f,0.1732f,0.9291f,  -0.0605f,0.0971f,0.1801f, -0.2891f,0.2913f,0.9055f,  -0.0569f,0.1275f,0.1694f, -0.2813f,0.3701f,0.8819f,  -0.0526f,0.1586f,0.1565f, -0.2813f,0.4094f,0.8583f,  -0.0638f,0.0400f,-0.1900f, -0.3047f,-0.0469f,-0.9453f,  -0.0629f,0.0678f,-0.1873f, -0.2969f,0.1732f,-0.9297f,  0.0000f,0.0678f,-0.1972f, 0.0000f,0.1732f,-0.9844f,  0.0000f,0.0400f,-0.2000f, 0.0000f,-0.0469f,-0.9922f,  -0.0605f,0.0971f,-0.1801f, -0.2891f,0.2913f,-0.9063f,  0.0000f,0.0971f,-0.1896f, 0.0000f,0.2913f,-0.9531f,  -0.0569f,0.1275f,-0.1694f, -0.2813f,0.3701f,-0.8750f,  0.0000f,0.1275f,-0.1784f, 0.0000f,0.3701f,-0.9219f,  -0.0526f,0.1586f,-0.1565f, -0.2813f,0.4094f,-0.8594f,  0.0000f,0.1586f,-0.1648f, 0.0000f,0.4094f,-0.9063f,  -0.1188f,0.0400f,-0.1619f, -0.5859f,-0.0469f,-0.8047f,  -0.1171f,0.0678f,-0.1596f, -0.5781f,0.1732f,-0.7891f,  -0.1126f,0.0971f,-0.1534f, -0.5547f,0.2913f,-0.7656f,  -0.1060f,0.1275f,-0.1444f, -0.5391f,0.3701f,-0.7500f,  -0.0979f,0.1586f,-0.1334f, -0.5313f,0.4094f,-0.7344f,  -0.1619f,0.0400f,-0.1188f, -0.8047f,-0.0469f,-0.5859f,  -0.1596f,0.0678f,-0.1171f, -0.7891f,0.1732f,-0.5781f,  -0.1534f,0.0971f,-0.1126f, -0.7656f,0.2913f,-0.5547f,  -0.1444f,0.1275f,-0.1060f, -0.7500f,0.3701f,-0.5391f,  -0.1334f,0.1586f,-0.0979f, -0.7344f,0.4094f,-0.5313f,  -0.1900f,0.0400f,-0.0638f, -0.9453f,-0.0469f,-0.3047f,  -0.1873f,0.0678f,-0.0629f, -0.9297f,0.1732f,-0.2969f,  -0.1801f,0.0971f,-0.0605f, -0.9063f,0.2913f,-0.2891f,  -0.1694f,0.1275f,-0.0569f, -0.8750f,0.3701f,-0.2813f,  -0.1565f,0.1586f,-0.0526f, -0.8594f,0.4094f,-0.2813f,  0.1900f,0.0400f,-0.0638f, 0.9449f,-0.0469f,-0.3047f,  0.1873f,0.0678f,-0.0629f, 0.9291f,0.1732f,-0.2969f,  0.1801f,0.0971f,-0.0605f, 0.9055f,0.2913f,-0.2891f,  0.1694f,0.1275f,-0.0569f, 0.8819f,0.3701f,-0.2813f,  0.1565f,0.1586f,-0.0526f, 0.8583f,0.4094f,-0.2813f,  0.1619f,0.0400f,-0.1188f, 0.8031f,-0.0469f,-0.5859f,  0.1596f,0.0678f,-0.1171f, 0.7953f,0.1732f,-0.5781f,  0.1534f,0.0971f,-0.1126f, 0.7717f,0.2913f,-0.5547f,  0.1444f,0.1275f,-0.1060f, 0.7480f,0.3701f,-0.5391f,  0.1334f,0.1586f,-0.0979f, 0.7323f,0.4094f,-0.5313f,  0.1188f,0.0400f,-0.1619f, 0.5827f,-0.0469f,-0.8047f,  0.1171f,0.0678f,-0.1596f, 0.5748f,0.1732f,-0.7891f,  0.1126f,0.0971f,-0.1534f, 0.5591f,0.2913f,-0.7656f,  0.1060f,0.1275f,-0.1444f, 0.5433f,0.3701f,-0.7500f,  0.0979f,0.1586f,-0.1334f, 0.5276f,0.4094f,-0.7344f,  0.0638f,0.0400f,-0.1900f, 0.3071f,-0.0469f,-0.9453f,  0.0629f,0.0678f,-0.1873f, 0.2992f,0.1732f,-0.9297f,  0.0605f,0.0971f,-0.1801f, 0.2913f,0.2913f,-0.9063f,  0.0569f,0.1275f,-0.1694f, 0.2835f,0.3701f,-0.8750f,  0.0526f,0.1586f,-0.1565f, 0.2756f,0.4094f,-0.8594f,  0.0479f,-0.0350f,0.1425f, 0.2362f,-0.6328f,0.7323f,  0.0495f,-0.0286f,0.1474f, 0.2126f,-0.7031f,0.6693f,  0.0000f,-0.0286f,0.1552f, 0.0000f,-0.7031f,0.7008f,  0.0000f,-0.0350f,0.1500f, 0.0000f,-0.5234f,0.8504f,  0.0535f,-0.0183f,0.1592f, 0.2047f,-0.7344f,0.6378f,  0.0000f,-0.0183f,0.1676f, 0.0000f,-0.7344f,0.6693f,  0.0582f,-0.0037f,0.1732f, 0.2362f,-0.6172f,0.7402f,  0.0000f,-0.0037f,0.1824f, 0.0000f,-0.6172f,0.7795f,  0.0621f,0.0156f,0.1850f, 0.2835f,-0.3750f,0.8740f,  0.0000f,0.0156f,0.1948f, 0.0000f,-0.3672f,0.9213f,  0.0891f,-0.0350f,0.1214f, 0.4961f,-0.5234f,0.6850f,  0.0922f,-0.0286f,0.1256f, 0.4094f,-0.7031f,0.5669f,  0.0995f,-0.0183f,0.1356f, 0.3937f,-0.7344f,0.5433f,  0.1083f,-0.0037f,0.1476f, 0.4567f,-0.6250f,0.6299f,  0.1157f,0.0156f,0.1576f, 0.5433f,-0.3750f,0.7480f,  0.1214f,-0.0350f,0.0891f, 0.6850f,-0.5234f,0.4961f,  0.1256f,-0.0286f,0.0922f, 0.5669f,-0.7031f,0.4094f,  0.1356f,-0.0183f,0.0995f, 0.5433f,-0.7344f,0.3937f,  0.1476f,-0.0037f,0.1083f, 0.6299f,-0.6250f,0.4567f,  0.1576f,0.0156f,0.1157f, 0.7480f,-0.3750f,0.5433f,  0.1425f,-0.0350f,0.0479f, 0.7323f,-0.6328f,0.2362f,  0.1474f,-0.0286f,0.0495f, 0.6693f,-0.7031f,0.2126f,  0.1592f,-0.0183f,0.0535f, 0.6378f,-0.7344f,0.2047f,  0.1732f,-0.0037f,0.0582f, 0.7402f,-0.6172f,0.2362f,  0.1850f,0.0156f,0.0621f, 0.8740f,-0.3750f,0.2835f,  0.1500f,-0.0350f,0.0000f, 0.8504f,-0.5234f,0.0000f,  0.1552f,-0.0286f,0.0000f, 0.7008f,-0.7031f,0.0000f,  0.1676f,-0.0183f,0.0000f, 0.6693f,-0.7344f,0.0000f,  0.1824f,-0.0037f,0.0000f, 0.7795f,-0.6172f,0.0000f,  0.1948f,0.0156f,0.0000f, 0.9213f,-0.3672f,0.0000f,  -0.1425f,-0.0350f,0.0479f, -0.7344f,-0.6328f,0.2362f,  -0.1474f,-0.0286f,0.0495f, -0.6641f,-0.7031f,0.2126f,  -0.1552f,-0.0286f,0.0000f, -0.7031f,-0.7031f,0.0000f,  -0.1500f,-0.0350f,0.0000f, -0.8438f,-0.5234f,0.0000f,  -0.1592f,-0.0183f,0.0535f, -0.6406f,-0.7344f,0.2047f,  -0.1676f,-0.0183f,0.0000f, -0.6719f,-0.7344f,0.0000f,  -0.1732f,-0.0037f,0.0582f, -0.7422f,-0.6172f,0.2362f,  -0.1824f,-0.0037f,0.0000f, -0.7813f,-0.6172f,0.0000f,  -0.1850f,0.0156f,0.0621f, -0.8750f,-0.3750f,0.2835f,  -0.1948f,0.0156f,0.0000f, -0.9219f,-0.3672f,0.0000f,  -0.1214f,-0.0350f,0.0891f, -0.6797f,-0.5234f,0.4961f,  -0.1256f,-0.0286f,0.0922f, -0.5625f,-0.7031f,0.4094f,  -0.1356f,-0.0183f,0.0995f, -0.5391f,-0.7344f,0.3937f,  -0.1476f,-0.0037f,0.1083f, -0.6250f,-0.6250f,0.4567f,  -0.1576f,0.0156f,0.1157f, -0.7422f,-0.3750f,0.5433f,  -0.0891f,-0.0350f,0.1214f, -0.4922f,-0.5234f,0.6850f,  -0.0922f,-0.0286f,0.1256f, -0.4141f,-0.7031f,0.5669f,  -0.0995f,-0.0183f,0.1356f, -0.3906f,-0.7344f,0.5433f,  -0.1083f,-0.0037f,0.1476f, -0.4531f,-0.6250f,0.6299f,  -0.1157f,0.0156f,0.1576f, -0.5391f,-0.3750f,0.7480f,  -0.0479f,-0.0350f,0.1425f, -0.2344f,-0.6328f,0.7323f,  -0.0495f,-0.0286f,0.1474f, -0.2109f,-0.7031f,0.6693f,  -0.0535f,-0.0183f,0.1592f, -0.2031f,-0.7344f,0.6378f,  -0.0582f,-0.0037f,0.1732f, -0.2344f,-0.6172f,0.7402f,  -0.0621f,0.0156f,0.1850f, -0.2813f,-0.3750f,0.8740f,  -0.0479f,-0.0350f,-0.1425f, -0.2344f,-0.6328f,-0.7344f,  -0.0495f,-0.0286f,-0.1474f, -0.2109f,-0.7031f,-0.6641f,  0.0000f,-0.0286f,-0.1552f, 0.0000f,-0.7031f,-0.7031f,  0.0000f,-0.0350f,-0.1500f, 0.0000f,-0.5234f,-0.8438f,  -0.0535f,-0.0183f,-0.1592f, -0.2031f,-0.7344f,-0.6406f,  0.0000f,-0.0183f,-0.1676f, 0.0000f,-0.7344f,-0.6719f,  -0.0582f,-0.0037f,-0.1732f, -0.2344f,-0.6172f,-0.7422f,  0.0000f,-0.0037f,-0.1824f, 0.0000f,-0.6172f,-0.7813f,  -0.0621f,0.0156f,-0.1850f, -0.2813f,-0.3750f,-0.8750f,  0.0000f,0.0156f,-0.1948f, 0.0000f,-0.3672f,-0.9219f,  -0.0891f,-0.0350f,-0.1214f, -0.4922f,-0.5234f,-0.6797f,  -0.0922f,-0.0286f,-0.1256f, -0.4141f,-0.7031f,-0.5625f,  -0.0995f,-0.0183f,-0.1356f, -0.3906f,-0.7344f,-0.5391f,  -0.1083f,-0.0037f,-0.1476f, -0.4531f,-0.6250f,-0.6250f,  -0.1157f,0.0156f,-0.1576f, -0.5391f,-0.3750f,-0.7422f,  -0.1214f,-0.0350f,-0.0891f, -0.6797f,-0.5234f,-0.4922f,  -0.1256f,-0.0286f,-0.0922f, -0.5625f,-0.7031f,-0.4141f,  -0.1356f,-0.0183f,-0.0995f, -0.5391f,-0.7344f,-0.3906f,  -0.1476f,-0.0037f,-0.1083f, -0.6250f,-0.6250f,-0.4531f,  -0.1576f,0.0156f,-0.1157f, -0.7422f,-0.3750f,-0.5391f,  -0.1425f,-0.0350f,-0.0479f, -0.7344f,-0.6328f,-0.2344f,  -0.1474f,-0.0286f,-0.0495f, -0.6641f,-0.7031f,-0.2109f,  -0.1592f,-0.0183f,-0.0535f, -0.6406f,-0.7344f,-0.2031f,  -0.1732f,-0.0037f,-0.0582f, -0.7422f,-0.6172f,-0.2344f,  -0.1850f,0.0156f,-0.0621f, -0.8750f,-0.3750f,-0.2813f,  0.1425f,-0.0350f,-0.0479f, 0.7323f,-0.6328f,-0.2344f,  0.1474f,-0.0286f,-0.0495f, 0.6693f,-0.7031f,-0.2109f,  0.1592f,-0.0183f,-0.0535f, 0.6378f,-0.7344f,-0.2031f,  0.1732f,-0.0037f,-0.0582f, 0.7402f,-0.6172f,-0.2344f,  0.1850f,0.0156f,-0.0621f, 0.8740f,-0.3750f,-0.2813f,  0.1214f,-0.0350f,-0.0891f, 0.6850f,-0.5234f,-0.4922f,  0.1256f,-0.0286f,-0.0922f, 0.5669f,-0.7031f,-0.4141f,  0.1356f,-0.0183f,-0.0995f, 0.5433f,-0.7344f,-0.3906f,  0.1476f,-0.0037f,-0.1083f, 0.6299f,-0.6250f,-0.4531f,  0.1576f,0.0156f,-0.1157f, 0.7480f,-0.3750f,-0.5391f,  0.0891f,-0.0350f,-0.1214f, 0.4961f,-0.5234f,-0.6797f,  0.0922f,-0.0286f,-0.1256f, 0.4094f,-0.7031f,-0.5625f,  0.0995f,-0.0183f,-0.1356f, 0.3937f,-0.7344f,-0.5391f,  0.1083f,-0.0037f,-0.1476f, 0.4567f,-0.6250f,-0.6250f,  0.1157f,0.0156f,-0.1576f, 0.5433f,-0.3750f,-0.7422f,  0.0479f,-0.0350f,-0.1425f, 0.2362f,-0.6328f,-0.7344f,  0.0495f,-0.0286f,-0.1474f, 0.2126f,-0.7031f,-0.6641f,  0.0535f,-0.0183f,-0.1592f, 0.2047f,-0.7344f,-0.6406f,  0.0582f,-0.0037f,-0.1732f, 0.2362f,-0.6172f,-0.7422f,  0.0621f,0.0156f,-0.1850f, 0.2835f,-0.3750f,-0.8750f,  0.0479f,-0.0350f,-0.1425f, 0.2835f,-0.3906f,-0.8672f,  0.0472f,-0.0394f,-0.1406f, 0.2205f,-0.6875f,-0.6797f,  0.0000f,-0.0394f,-0.1481f, 0.0000f,-0.6875f,-0.7188f,  0.0441f,-0.0435f,-0.1313f, 0.0787f,-0.9609f,-0.2578f,  0.0000f,-0.0435f,-0.1382f, 0.0000f,-0.9609f,-0.2734f,  0.0365f,-0.0469f,-0.1086f, 0.0236f,-0.9922f,-0.0938f,  0.0000f,-0.0469f,-0.1144f, 0.0000f,-0.9922f,-0.0938f,  0.0224f,-0.0492f,-0.0668f, 0.0079f,-0.9922f,-0.0313f,  0.0000f,-0.0492f,-0.0703f, 0.0000f,-0.9922f,-0.0313f,  0.0000f,-0.0500f,0.0000f, 0.0000f,-1.0000f,0.0000f,  0.0879f,-0.0394f,-0.1198f, 0.4173f,-0.6875f,-0.5781f,  0.0821f,-0.0435f,-0.1119f, 0.1575f,-0.9609f,-0.2188f,  0.0679f,-0.0469f,-0.0925f, 0.0551f,-0.9922f,-0.0781f,  0.0418f,-0.0492f,-0.0569f, 0.0157f,-0.9922f,-0.0234f,  0.1198f,-0.0394f,-0.0879f, 0.5748f,-0.6875f,-0.4219f,  0.1119f,-0.0435f,-0.0821f, 0.2205f,-0.9609f,-0.1563f,  0.0925f,-0.0469f,-0.0679f, 0.0787f,-0.9922f,-0.0547f,  0.0569f,-0.0492f,-0.0418f, 0.0236f,-0.9922f,-0.0156f,  0.1425f,-0.0350f,-0.0479f, 0.8661f,-0.3906f,-0.2813f,  0.1406f,-0.0394f,-0.0472f, 0.6772f,-0.6875f,-0.2188f,  0.1313f,-0.0435f,-0.0441f, 0.2598f,-0.9609f,-0.0781f,  0.1086f,-0.0469f,-0.0365f, 0.0945f,-0.9922f,-0.0234f,  0.0668f,-0.0492f,-0.0224f, 0.0315f,-0.9922f,-0.0078f,  0.1481f,-0.0394f,0.0000f, 0.7165f,-0.6875f,0.0000f,  0.1382f,-0.0435f,0.0000f, 0.2677f,-0.9609f,0.0000f,  0.1144f,-0.0469f,0.0000f, 0.0945f,-0.9922f,0.0000f,  0.0703f,-0.0492f,0.0000f, 0.0315f,-0.9922f,0.0000f,  -0.1425f,-0.0350f,-0.0479f, -0.8672f,-0.3906f,-0.2813f,  -0.1406f,-0.0394f,-0.0472f, -0.6797f,-0.6875f,-0.2188f,  -0.1481f,-0.0394f,0.0000f, -0.7188f,-0.6875f,0.0000f,  -0.1313f,-0.0435f,-0.0441f, -0.2578f,-0.9609f,-0.0781f,  -0.1382f,-0.0435f,0.0000f, -0.2734f,-0.9609f,0.0000f,  -0.1086f,-0.0469f,-0.0365f, -0.0938f,-0.9922f,-0.0234f,  -0.1144f,-0.0469f,0.0000f, -0.0938f,-0.9922f,0.0000f,  -0.0668f,-0.0492f,-0.0224f, -0.0313f,-0.9922f,-0.0078f,  -0.0703f,-0.0492f,0.0000f, -0.0313f,-0.9922f,0.0000f,  -0.1198f,-0.0394f,-0.0879f, -0.5781f,-0.6875f,-0.4219f,  -0.1119f,-0.0435f,-0.0821f, -0.2188f,-0.9609f,-0.1563f,  -0.0925f,-0.0469f,-0.0679f, -0.0781f,-0.9922f,-0.0547f,  -0.0569f,-0.0492f,-0.0418f, -0.0234f,-0.9922f,-0.0156f,  -0.0879f,-0.0394f,-0.1198f, -0.4219f,-0.6875f,-0.5781f,  -0.0821f,-0.0435f,-0.1119f, -0.1563f,-0.9609f,-0.2188f,  -0.0679f,-0.0469f,-0.0925f, -0.0547f,-0.9922f,-0.0781f,  -0.0418f,-0.0492f,-0.0569f, -0.0156f,-0.9922f,-0.0234f,  -0.0479f,-0.0350f,-0.1425f, -0.2813f,-0.3906f,-0.8672f,  -0.0472f,-0.0394f,-0.1406f, -0.2188f,-0.6875f,-0.6797f,  -0.0441f,-0.0435f,-0.1313f, -0.0781f,-0.9609f,-0.2578f,  -0.0365f,-0.0469f,-0.1086f, -0.0234f,-0.9922f,-0.0938f,  -0.0224f,-0.0492f,-0.0668f, -0.0078f,-0.9922f,-0.0313f,  -0.0479f,-0.0350f,0.1425f, -0.2813f,-0.3906f,0.8661f,  -0.0472f,-0.0394f,0.1406f, -0.2188f,-0.6875f,0.6772f,  0.0000f,-0.0394f,0.1481f, 0.0000f,-0.6875f,0.7165f,  -0.0441f,-0.0435f,0.1313f, -0.0781f,-0.9609f,0.2598f,  0.0000f,-0.0435f,0.1382f, 0.0000f,-0.9609f,0.2677f,  -0.0365f,-0.0469f,0.1086f, -0.0234f,-0.9922f,0.0945f,  0.0000f,-0.0469f,0.1144f, 0.0000f,-0.9922f,0.0945f,  -0.0224f,-0.0492f,0.0668f, -0.0078f,-0.9922f,0.0315f,  0.0000f,-0.0492f,0.0703f, 0.0000f,-0.9922f,0.0315f,  -0.0879f,-0.0394f,0.1198f, -0.4219f,-0.6875f,0.5748f,  -0.0821f,-0.0435f,0.1119f, -0.1563f,-0.9609f,0.2205f,  -0.0679f,-0.0469f,0.0925f, -0.0547f,-0.9922f,0.0787f,  -0.0418f,-0.0492f,0.0569f, -0.0156f,-0.9922f,0.0236f,  -0.1198f,-0.0394f,0.0879f, -0.5781f,-0.6875f,0.4173f,  -0.1119f,-0.0435f,0.0821f, -0.2188f,-0.9609f,0.1575f,  -0.0925f,-0.0469f,0.0679f, -0.0781f,-0.9922f,0.0551f,  -0.0569f,-0.0492f,0.0418f, -0.0234f,-0.9922f,0.0157f,  -0.1425f,-0.0350f,0.0479f, -0.8672f,-0.3906f,0.2835f,  -0.1406f,-0.0394f,0.0472f, -0.6797f,-0.6875f,0.2205f,  -0.1313f,-0.0435f,0.0441f, -0.2578f,-0.9609f,0.0787f,  -0.1086f,-0.0469f,0.0365f, -0.0938f,-0.9922f,0.0236f,  -0.0668f,-0.0492f,0.0224f, -0.0313f,-0.9922f,0.0079f,  0.1425f,-0.0350f,0.0479f, 0.8661f,-0.3906f,0.2835f,  0.1406f,-0.0394f,0.0472f, 0.6772f,-0.6875f,0.2205f,  0.1313f,-0.0435f,0.0441f, 0.2598f,-0.9609f,0.0787f,  0.1086f,-0.0469f,0.0365f, 0.0945f,-0.9922f,0.0236f,  0.0668f,-0.0492f,0.0224f, 0.0315f,-0.9922f,0.0079f,  0.1198f,-0.0394f,0.0879f, 0.5748f,-0.6875f,0.4173f,  0.1119f,-0.0435f,0.0821f, 0.2205f,-0.9609f,0.1575f,  0.0925f,-0.0469f,0.0679f, 0.0787f,-0.9922f,0.0551f,  0.0569f,-0.0492f,0.0418f, 0.0236f,-0.9922f,0.0157f,  0.0879f,-0.0394f,0.1198f, 0.4173f,-0.6875f,0.5748f,  0.0821f,-0.0435f,0.1119f, 0.1575f,-0.9609f,0.2205f,  0.0679f,-0.0469f,0.0925f, 0.0551f,-0.9922f,0.0787f,  0.0418f,-0.0492f,0.0569f, 0.0157f,-0.9922f,0.0236f,  0.0479f,-0.0350f,0.1425f, 0.2835f,-0.3906f,0.8661f,  0.0472f,-0.0394f,0.1406f, 0.2205f,-0.6875f,0.6772f,  0.0441f,-0.0435f,0.1313f, 0.0787f,-0.9609f,0.2598f,  0.0365f,-0.0469f,0.1086f, 0.0236f,-0.9922f,0.0945f,  0.0224f,-0.0492f,0.0668f, 0.0079f,-0.9922f,0.0315f,  -0.2969f,0.1300f,0.0144f, -0.8750f,0.0472f,0.4724f,  -0.2910f,0.1508f,0.0144f, -0.7266f,0.5039f,0.4567f,  -0.2940f,0.1520f,0.0000f, -0.8203f,0.5591f,0.0000f,  -0.3000f,0.1300f,0.0000f, -0.9922f,0.0472f,0.0000f,  -0.2734f,0.1634f,0.0144f, -0.3750f,0.8189f,0.4252f,  -0.2760f,0.1653f,0.0000f, -0.4219f,0.8976f,0.0000f,  -0.2442f,0.1699f,0.0144f, -0.1250f,0.9055f,0.3937f,  -0.2460f,0.1721f,0.0000f, -0.1406f,0.9843f,0.0000f,  -0.2034f,0.1723f,0.0144f, -0.0234f,0.9134f,0.3937f,  -0.2040f,0.1746f,0.0000f, -0.0313f,0.9921f,0.0000f,  -0.1510f,0.1727f,0.0144f, 0.0000f,0.9213f,0.3701f,  -0.1500f,0.1750f,0.0000f, 0.0000f,1.0000f,0.0000f,  -0.2894f,0.1300f,0.0216f, -0.4141f,0.0236f,0.9055f,  -0.2839f,0.1481f,0.0216f, -0.3438f,0.2677f,0.8898f,  -0.2674f,0.1591f,0.0216f, -0.1563f,0.4252f,0.8898f,  -0.2400f,0.1647f,0.0216f, -0.0469f,0.4488f,0.8898f,  -0.2020f,0.1668f,0.0216f, -0.0078f,0.4409f,0.8898f,  -0.1535f,0.1671f,0.0216f, 0.0000f,0.5354f,0.8346f,  -0.2806f,0.1300f,0.0216f, 0.3150f,-0.0234f,0.9449f,  -0.2754f,0.1448f,0.0216f, 0.2362f,-0.1797f,0.9528f,  -0.2601f,0.1538f,0.0216f, 0.1339f,-0.3516f,0.9213f,  -0.2350f,0.1585f,0.0216f, 0.0472f,-0.4141f,0.8976f,  -0.2003f,0.1602f,0.0216f, 0.0079f,-0.4297f,0.8976f,  -0.1565f,0.1604f,0.0216f, 0.0000f,-0.3438f,0.9370f,  -0.2731f,0.1300f,0.0144f, 0.8504f,-0.0938f,0.5118f,  -0.2683f,0.1421f,0.0144f, 0.6299f,-0.5859f,0.4961f,  -0.2540f,0.1495f,0.0144f, 0.2677f,-0.8594f,0.4252f,  -0.2307f,0.1532f,0.0144f, 0.0866f,-0.9063f,0.3937f,  -0.1989f,0.1546f,0.0144f, 0.0157f,-0.9141f,0.3937f,  -0.1590f,0.1548f,0.0144f, 0.0000f,-0.9063f,0.4173f,  -0.2700f,0.1300f,0.0000f, 0.9921f,-0.1172f,0.0000f,  -0.2653f,0.1410f,0.0000f, 0.7165f,-0.6953f,0.0000f,  -0.2514f,0.1476f,0.0000f, 0.2913f,-0.9531f,0.0000f,  -0.2290f,0.1511f,0.0000f, 0.0945f,-0.9922f,0.0000f,  -0.1983f,0.1523f,0.0000f, 0.0157f,-0.9922f,0.0000f,  -0.1600f,0.1525f,0.0000f, 0.0000f,-1.0000f,0.0000f,  -0.2731f,0.1300f,-0.0144f, 0.8504f,-0.0938f,-0.5078f,  -0.2683f,0.1421f,-0.0144f, 0.6299f,-0.5859f,-0.5000f,  -0.2540f,0.1495f,-0.0144f, 0.2677f,-0.8594f,-0.4219f,  -0.2307f,0.1532f,-0.0144f, 0.0866f,-0.9063f,-0.3984f,  -0.1989f,0.1546f,-0.0144f, 0.0157f,-0.9141f,-0.3906f,  -0.1590f,0.1548f,-0.0144f, 0.0000f,-0.9063f,-0.4141f,  -0.2806f,0.1300f,-0.0216f, 0.3150f,-0.0234f,-0.9453f,  -0.2754f,0.1448f,-0.0216f, 0.2362f,-0.1797f,-0.9531f,  -0.2601f,0.1538f,-0.0216f, 0.1339f,-0.3516f,-0.9219f,  -0.2350f,0.1585f,-0.0216f, 0.0472f,-0.4141f,-0.8984f,  -0.2003f,0.1602f,-0.0216f, 0.0079f,-0.4297f,-0.8984f,  -0.1565f,0.1604f,-0.0216f, 0.0000f,-0.3438f,-0.9375f,  -0.2894f,0.1300f,-0.0216f, -0.4141f,0.0236f,-0.9063f,  -0.2839f,0.1481f,-0.0216f, -0.3438f,0.2677f,-0.8906f,  -0.2674f,0.1591f,-0.0216f, -0.1563f,0.4252f,-0.8828f,  -0.2400f,0.1647f,-0.0216f, -0.0469f,0.4488f,-0.8906f,  -0.2020f,0.1668f,-0.0216f, -0.0078f,0.4409f,-0.8906f,  -0.1535f,0.1671f,-0.0216f, 0.0000f,0.5354f,-0.8359f,  -0.2969f,0.1300f,-0.0144f, -0.8750f,0.0472f,-0.4688f,  -0.2910f,0.1508f,-0.0144f, -0.7266f,0.5039f,-0.4609f,  -0.2734f,0.1634f,-0.0144f, -0.3750f,0.8189f,-0.4219f,  -0.2442f,0.1699f,-0.0144f, -0.1250f,0.9055f,-0.3984f,  -0.2034f,0.1723f,-0.0144f, -0.0234f,0.9134f,-0.3906f,  -0.1510f,0.1727f,-0.0144f, 0.0000f,0.9213f,-0.3672f,  -0.1910f,0.0131f,0.0144f, -0.4375f,-0.8281f,0.3307f,  -0.2298f,0.0337f,0.0144f, -0.4844f,-0.7656f,0.4016f,  -0.2302f,0.0311f,0.0000f, -0.5234f,-0.8438f,0.0000f,  -0.1900f,0.0100f,0.0000f, -0.4609f,-0.8828f,0.0000f,  -0.2596f,0.0560f,0.0144f, -0.6094f,-0.6563f,0.4252f,  -0.2611f,0.0539f,0.0000f, -0.6719f,-0.7344f,0.0000f,  -0.2805f,0.0798f,0.0144f, -0.7344f,-0.4922f,0.4567f,  -0.2829f,0.0780f,0.0000f, -0.8203f,-0.5547f,0.0000f,  -0.2928f,0.1046f,0.0144f, -0.8359f,-0.2656f,0.4646f,  -0.2958f,0.1035f,0.0000f, -0.9453f,-0.3047f,0.0000f,  -0.1935f,0.0206f,0.0216f, -0.2969f,-0.5547f,0.7717f,  -0.2289f,0.0398f,0.0216f, -0.2500f,-0.3672f,0.8898f,  -0.2559f,0.0613f,0.0216f, -0.2969f,-0.3125f,0.8976f,  -0.2747f,0.0840f,0.0216f, -0.3438f,-0.2266f,0.9055f,  -0.2858f,0.1072f,0.0216f, -0.3828f,-0.1172f,0.9134f,  -0.1965f,0.0294f,0.0216f, 0.1260f,0.2126f,0.9606f,  -0.2278f,0.0471f,0.0216f, 0.2283f,0.3386f,0.9055f,  -0.2515f,0.0675f,0.0216f, 0.2835f,0.2677f,0.9134f,  -0.2679f,0.0891f,0.0216f, 0.3150f,0.1811f,0.9291f,  -0.2775f,0.1104f,0.0216f, 0.3307f,0.0945f,0.9291f,  -0.1990f,0.0369f,0.0144f, 0.4488f,0.7717f,0.4409f,  -0.2269f,0.0533f,0.0144f, 0.5433f,0.7244f,0.4094f,  -0.2478f,0.0727f,0.0144f, 0.6693f,0.5906f,0.4331f,  -0.2622f,0.0933f,0.0144f, 0.7638f,0.4252f,0.4724f,  -0.2705f,0.1130f,0.0144f, 0.8346f,0.2362f,0.4882f,  -0.2265f,0.0558f,0.0000f, 0.6063f,0.7874f,0.0000f,  -0.2462f,0.0749f,0.0000f, 0.7559f,0.6457f,0.0000f,  -0.2598f,0.0951f,0.0000f, 0.8740f,0.4724f,0.0000f,  -0.2675f,0.1142f,0.0000f, 0.9606f,0.2677f,0.0000f,  -0.1990f,0.0369f,-0.0144f, 0.4488f,0.7717f,-0.4375f,  -0.2269f,0.0533f,-0.0144f, 0.5433f,0.7244f,-0.4063f,  -0.2478f,0.0727f,-0.0144f, 0.6693f,0.5906f,-0.4375f,  -0.2622f,0.0933f,-0.0144f, 0.7638f,0.4252f,-0.4688f,  -0.2705f,0.1130f,-0.0144f, 0.8346f,0.2362f,-0.4844f,  -0.1965f,0.0294f,-0.0216f, 0.1260f,0.2126f,-0.9609f,  -0.2278f,0.0471f,-0.0216f, 0.2283f,0.3386f,-0.9063f,  -0.2515f,0.0675f,-0.0216f, 0.2835f,0.2677f,-0.9141f,  -0.2679f,0.0891f,-0.0216f, 0.3150f,0.1811f,-0.9297f,  -0.2775f,0.1104f,-0.0216f, 0.3307f,0.0945f,-0.9297f,  -0.1935f,0.0206f,-0.0216f, -0.2969f,-0.5547f,-0.7734f,  -0.2289f,0.0398f,-0.0216f, -0.2500f,-0.3672f,-0.8906f,  -0.2559f,0.0613f,-0.0216f, -0.2969f,-0.3125f,-0.8984f,  -0.2747f,0.0840f,-0.0216f, -0.3438f,-0.2266f,-0.9063f,  -0.2858f,0.1072f,-0.0216f, -0.3828f,-0.1172f,-0.9063f,  -0.1910f,0.0131f,-0.0144f, -0.4375f,-0.8281f,-0.3359f,  -0.2298f,0.0337f,-0.0144f, -0.4844f,-0.7656f,-0.3984f,  -0.2596f,0.0560f,-0.0144f, -0.6094f,-0.6563f,-0.4219f,  -0.2805f,0.0798f,-0.0144f, -0.7344f,-0.4922f,-0.4531f,  -0.2928f,0.1046f,-0.0144f, -0.8359f,-0.2656f,-0.4688f,  0.3238f,0.1900f,0.0120f, 0.4567f,-0.6719f,0.5748f,  0.2881f,0.1600f,0.0140f, 0.6772f,-0.4297f,0.5906f,  0.2922f,0.1590f,0.0000f, 0.8031f,-0.5938f,0.0000f,  0.3300f,0.1900f,0.0000f, 0.5118f,-0.8516f,0.0000f,  0.2718f,0.1196f,0.0189f, 0.8425f,-0.2344f,0.4646f,  0.2751f,0.1169f,0.0000f, 0.9370f,-0.3203f,0.0000f,  0.2579f,0.0771f,0.0248f, 0.8110f,-0.3828f,0.4331f,  0.2609f,0.0723f,0.0000f, 0.8819f,-0.4609f,0.0000f,  0.2296f,0.0406f,0.0296f, 0.5276f,-0.6797f,0.4882f,  0.2318f,0.0338f,0.0000f, 0.5906f,-0.8047f,0.0000f,  0.1700f,0.0186f,0.0317f, 0.3150f,-0.8047f,0.4961f,  0.1700f,0.0100f,0.0000f, 0.3543f,-0.9297f,0.0000f,  0.3089f,0.1900f,0.0180f, 0.1890f,-0.1016f,0.9685f,  0.2784f,0.1623f,0.0211f, 0.2835f,-0.0234f,0.9528f,  0.2640f,0.1260f,0.0284f, 0.4488f,0.0157f,0.8898f,  0.2509f,0.0884f,0.0371f, 0.5039f,-0.0859f,0.8504f,  0.2245f,0.0570f,0.0444f, 0.3228f,-0.2813f,0.8976f,  0.1700f,0.0390f,0.0475f, 0.1732f,-0.3672f,0.9055f,  0.2911f,0.1900f,0.0180f, -0.1719f,0.3780f,0.9055f,  0.2667f,0.1651f,0.0211f, -0.2344f,0.3071f,0.9134f,  0.2546f,0.1336f,0.0284f, -0.2266f,0.2992f,0.9213f,  0.2425f,0.1020f,0.0371f, -0.0859f,0.3307f,0.9370f,  0.2184f,0.0765f,0.0444f, -0.0078f,0.2992f,0.9528f,  0.1700f,0.0635f,0.0475f, -0.0078f,0.2835f,0.9528f,  0.2762f,0.1900f,0.0120f, -0.5078f,0.6535f,0.5512f,  0.2570f,0.1674f,0.0140f, -0.6953f,0.4646f,0.5354f,  0.2467f,0.1400f,0.0189f, -0.7578f,0.4016f,0.5039f,  0.2355f,0.1134f,0.0248f, -0.6406f,0.5591f,0.5118f,  0.2133f,0.0929f,0.0296f, -0.3281f,0.7559f,0.5512f,  0.1700f,0.0839f,0.0317f, -0.1406f,0.8110f,0.5591f,  0.2700f,0.1900f,0.0000f, -0.6719f,0.7323f,0.0000f,  0.2529f,0.1683f,0.0000f, -0.8594f,0.5039f,0.0000f,  0.2434f,0.1427f,0.0000f, -0.9141f,0.3858f,0.0000f,  0.2326f,0.1182f,0.0000f, -0.8047f,0.5906f,0.0000f,  0.2111f,0.0998f,0.0000f, -0.4375f,0.8976f,0.0000f,  0.1700f,0.0925f,0.0000f, -0.1797f,0.9764f,0.0000f,  0.2762f,0.1900f,-0.0120f, -0.5078f,0.6535f,-0.5469f,  0.2570f,0.1674f,-0.0140f, -0.6953f,0.4646f,-0.5391f,  0.2467f,0.1400f,-0.0189f, -0.7578f,0.4016f,-0.5000f,  0.2355f,0.1134f,-0.0248f, -0.6406f,0.5591f,-0.5156f,  0.2133f,0.0929f,-0.0296f, -0.3281f,0.7559f,-0.5547f,  0.1700f,0.0839f,-0.0317f, -0.1406f,0.8110f,-0.5547f,  0.2911f,0.1900f,-0.0180f, -0.1719f,0.3780f,-0.9063f,  0.2667f,0.1651f,-0.0211f, -0.2344f,0.3071f,-0.9141f,  0.2546f,0.1336f,-0.0284f, -0.2266f,0.2992f,-0.9219f,  0.2425f,0.1020f,-0.0371f, -0.0859f,0.3307f,-0.9375f,  0.2184f,0.0765f,-0.0444f, -0.0078f,0.2992f,-0.9531f,  0.1700f,0.0635f,-0.0475f, -0.0078f,0.2835f,-0.9531f,  0.3089f,0.1900f,-0.0180f, 0.1890f,-0.1016f,-0.9688f,  0.2784f,0.1623f,-0.0211f, 0.2835f,-0.0234f,-0.9531f,  0.2640f,0.1260f,-0.0284f, 0.4488f,0.0157f,-0.8906f,  0.2509f,0.0884f,-0.0371f, 0.5039f,-0.0859f,-0.8516f,  0.2245f,0.0570f,-0.0444f, 0.3228f,-0.2813f,-0.8984f,  0.1700f,0.0390f,-0.0475f, 0.1732f,-0.3672f,-0.9063f,  0.3238f,0.1900f,-0.0120f, 0.4567f,-0.6719f,-0.5703f,  0.2881f,0.1600f,-0.0140f, 0.6772f,-0.4297f,-0.5859f,  0.2718f,0.1196f,-0.0189f, 0.8425f,-0.2344f,-0.4688f,  0.2579f,0.0771f,-0.0248f, 0.8110f,-0.3828f,-0.4297f,  0.2296f,0.0406f,-0.0296f, 0.5276f,-0.6797f,-0.4922f,  0.1700f,0.0186f,-0.0317f, 0.3150f,-0.8047f,-0.4922f,  0.3158f,0.1900f,0.0072f, -0.2969f,0.7480f,-0.5781f,  0.3277f,0.1951f,0.0077f, -0.2734f,0.8819f,-0.3672f,  0.3328f,0.1952f,0.0000f, -0.3125f,0.9449f,0.0000f,  0.3200f,0.1900f,0.0000f, -0.3750f,0.9213f,0.0000f,  0.3349f,0.1973f,0.0089f, -0.0781f,0.9921f,-0.0313f,  0.3408f,0.1976f,0.0000f, -0.0234f,0.9921f,0.0000f,  0.3369f,0.1971f,0.0103f, 0.6850f,0.3386f,0.6378f,  0.3434f,0.1973f,0.0000f, 0.9685f,0.2441f,0.0000f,  0.3333f,0.1946f,0.0115f, 0.4724f,-0.5000f,0.7165f,  0.3400f,0.1947f,0.0000f, 0.5591f,-0.8203f,0.0000f,  0.3059f,0.1900f,0.0108f, -0.0469f,0.2677f,-0.9609f,  0.3155f,0.1946f,0.0115f, -0.1328f,0.6614f,-0.7266f,  0.3207f,0.1968f,0.0133f, -0.0859f,0.9685f,-0.2031f,  0.3213f,0.1966f,0.0155f, 0.1654f,0.7087f,0.6772f,  0.3174f,0.1943f,0.0173f, 0.1811f,0.0709f,0.9764f,  0.2941f,0.1900f,0.0108f, 0.2598f,-0.2266f,-0.9297f,  0.3010f,0.1942f,0.0115f, 0.1260f,0.3071f,-0.9375f,  0.3038f,0.1962f,0.0133f, 0.0000f,0.9213f,-0.3672f,  0.3028f,0.1961f,0.0155f, -0.0469f,0.8976f,0.4252f,  0.2984f,0.1940f,0.0173f, -0.1094f,0.5512f,0.8189f,  0.2842f,0.1900f,0.0072f, 0.5669f,-0.6172f,-0.5313f,  0.2889f,0.1938f,0.0077f, 0.5827f,-0.1563f,-0.7891f,  0.2896f,0.1956f,0.0089f, 0.2126f,0.8740f,-0.4219f,  0.2872f,0.1956f,0.0103f, -0.1563f,0.9528f,0.2441f,  0.2825f,0.1937f,0.0115f, -0.3359f,0.8031f,0.4724f,  0.2800f,0.1900f,0.0000f, 0.6693f,-0.7344f,0.0000f,  0.2838f,0.1936f,0.0000f, 0.8819f,-0.4609f,0.0000f,  0.2837f,0.1954f,0.0000f, 0.4961f,0.8583f,0.0000f,  0.2807f,0.1954f,0.0000f, -0.2266f,0.9685f,0.0000f,  0.2758f,0.1936f,0.0000f, -0.4453f,0.8898f,0.0000f,  0.2842f,0.1900f,-0.0072f, 0.5669f,-0.6172f,0.5354f,  0.2889f,0.1938f,-0.0077f, 0.5827f,-0.1563f,0.7874f,  0.2896f,0.1956f,-0.0089f, 0.2126f,0.8740f,0.4252f,  0.2872f,0.1956f,-0.0103f, -0.1563f,0.9528f,-0.2422f,  0.2825f,0.1937f,-0.0115f, -0.3359f,0.8031f,-0.4766f,  0.2941f,0.1900f,-0.0108f, 0.2598f,-0.2266f,0.9370f,  0.3010f,0.1942f,-0.0115f, 0.1260f,0.3071f,0.9370f,  0.3038f,0.1962f,-0.0133f, 0.0000f,0.9213f,0.3701f,  0.3028f,0.1961f,-0.0155f, -0.0469f,0.8976f,-0.4297f,  0.2984f,0.1940f,-0.0173f, -0.1094f,0.5512f,-0.8203f,  0.3059f,0.1900f,-0.0108f, -0.0469f,0.2677f,0.9606f,  0.3155f,0.1946f,-0.0115f, -0.1328f,0.6614f,0.7244f,  0.3207f,0.1968f,-0.0133f, -0.0859f,0.9685f,0.2047f,  0.3213f,0.1966f,-0.0155f, 0.1654f,0.7087f,-0.6719f,  0.3174f,0.1943f,-0.0173f, 0.1811f,0.0709f,-0.9766f,  0.3158f,0.1900f,-0.0072f, -0.2969f,0.7480f,0.5827f,  0.3277f,0.1951f,-0.0077f, -0.2734f,0.8819f,0.3622f,  0.3349f,0.1973f,-0.0089f, -0.0781f,0.9921f,0.0315f,  0.3369f,0.1971f,-0.0103f, 0.6850f,0.3386f,-0.6328f,  0.3333f,0.1946f,-0.0115f, 0.4724f,-0.5000f,-0.7109f,  0.0064f,0.2200f,0.0190f, 0.2283f,0.6614f,0.7008f,  0.0057f,0.2304f,0.0170f, 0.2913f,-0.2422f,0.9213f,  0.0000f,0.2304f,0.0179f, 0.0000f,-0.2422f,0.9685f,  0.0000f,0.2200f,0.0200f, 0.0000f,0.6614f,0.7402f,  0.0088f,0.2423f,0.0260f, 0.2362f,-0.6094f,0.7480f,  0.0000f,0.2423f,0.0274f, 0.0000f,-0.6094f,0.7874f,  0.0115f,0.2535f,0.0340f, 0.3071f,-0.0469f,0.9449f,  0.0000f,0.2535f,0.0358f, 0.0000f,-0.0469f,0.9921f,  0.0099f,0.2618f,0.0293f, 0.1732f,0.8189f,0.5354f,  0.0000f,0.2618f,0.0309f, 0.0000f,0.8189f,0.5669f,  0.0000f,0.2650f,0.0000f, 0.0000f,1.0000f,0.0000f,  0.0119f,0.2200f,0.0162f, 0.4331f,0.6614f,0.5984f,  0.0107f,0.2304f,0.0145f, 0.5669f,-0.2422f,0.7795f,  0.0163f,0.2423f,0.0222f, 0.4567f,-0.6094f,0.6378f,  0.0213f,0.2535f,0.0290f, 0.5827f,-0.0469f,0.8031f,  0.0184f,0.2618f,0.0250f, 0.3307f,0.8189f,0.4567f,  0.0162f,0.2200f,0.0119f, 0.5984f,0.6614f,0.4331f,  0.0145f,0.2304f,0.0107f, 0.7795f,-0.2422f,0.5669f,  0.0222f,0.2423f,0.0163f, 0.6378f,-0.6094f,0.4567f,  0.0290f,0.2535f,0.0213f, 0.8031f,-0.0469f,0.5827f,  0.0250f,0.2618f,0.0184f, 0.4567f,0.8189f,0.3307f,  0.0190f,0.2200f,0.0064f, 0.7008f,0.6614f,0.2283f,  0.0170f,0.2304f,0.0057f, 0.9213f,-0.2422f,0.2913f,  0.0260f,0.2423f,0.0088f, 0.7480f,-0.6094f,0.2362f,  0.0340f,0.2535f,0.0115f, 0.9449f,-0.0469f,0.3071f,  0.0293f,0.2618f,0.0099f, 0.5354f,0.8189f,0.1732f,  0.0200f,0.2200f,0.0000f, 0.7402f,0.6614f,0.0000f,  0.0179f,0.2304f,0.0000f, 0.9685f,-0.2422f,0.0000f,  0.0274f,0.2423f,0.0000f, 0.7874f,-0.6094f,0.0000f,  0.0358f,0.2535f,0.0000f, 0.9921f,-0.0469f,0.0000f,  0.0309f,0.2618f,0.0000f, 0.5669f,0.8189f,0.0000f,  -0.0190f,0.2200f,0.0064f, -0.7031f,0.6614f,0.2283f,  -0.0170f,0.2304f,0.0057f, -0.9219f,-0.2422f,0.2913f,  -0.0179f,0.2304f,0.0000f, -0.9688f,-0.2422f,0.0000f,  -0.0200f,0.2200f,0.0000f, -0.7422f,0.6614f,0.0000f,  -0.0260f,0.2423f,0.0088f, -0.7500f,-0.6094f,0.2362f,  -0.0274f,0.2423f,0.0000f, -0.7891f,-0.6094f,0.0000f,  -0.0340f,0.2535f,0.0115f, -0.9453f,-0.0469f,0.3071f,  -0.0358f,0.2535f,0.0000f, -0.9922f,-0.0469f,0.0000f,  -0.0293f,0.2618f,0.0099f, -0.5391f,0.8189f,0.1732f,  -0.0309f,0.2618f,0.0000f, -0.5625f,0.8189f,0.0000f,  -0.0162f,0.2200f,0.0119f, -0.6016f,0.6614f,0.4331f,  -0.0145f,0.2304f,0.0107f, -0.7813f,-0.2422f,0.5669f,  -0.0222f,0.2423f,0.0163f, -0.6328f,-0.6094f,0.4567f,  -0.0290f,0.2535f,0.0213f, -0.8047f,-0.0469f,0.5827f,  -0.0250f,0.2618f,0.0184f, -0.4531f,0.8189f,0.3307f,  -0.0119f,0.2200f,0.0162f, -0.4375f,0.6614f,0.5984f,  -0.0107f,0.2304f,0.0145f, -0.5625f,-0.2422f,0.7795f,  -0.0163f,0.2423f,0.0222f, -0.4609f,-0.6094f,0.6378f,  -0.0213f,0.2535f,0.0290f, -0.5859f,-0.0469f,0.8031f,  -0.0184f,0.2618f,0.0250f, -0.3281f,0.8189f,0.4567f,  -0.0064f,0.2200f,0.0190f, -0.2266f,0.6614f,0.7008f,  -0.0057f,0.2304f,0.0170f, -0.2969f,-0.2422f,0.9213f,  -0.0088f,0.2423f,0.0260f, -0.2422f,-0.6094f,0.7480f,  -0.0115f,0.2535f,0.0340f, -0.3047f,-0.0469f,0.9449f,  -0.0099f,0.2618f,0.0293f, -0.1719f,0.8189f,0.5354f,  -0.0064f,0.2200f,-0.0190f, -0.2266f,0.6614f,-0.7031f,  -0.0057f,0.2304f,-0.0170f, -0.2969f,-0.2422f,-0.9219f,  0.0000f,0.2304f,-0.0179f, 0.0000f,-0.2422f,-0.9688f,  0.0000f,0.2200f,-0.0200f, 0.0000f,0.6614f,-0.7422f,  -0.0088f,0.2423f,-0.0260f, -0.2422f,-0.6094f,-0.7500f,  0.0000f,0.2423f,-0.0274f, 0.0000f,-0.6094f,-0.7891f,  -0.0115f,0.2535f,-0.0340f, -0.3047f,-0.0469f,-0.9453f,  0.0000f,0.2535f,-0.0358f, 0.0000f,-0.0469f,-0.9922f,  -0.0099f,0.2618f,-0.0293f, -0.1719f,0.8189f,-0.5391f,  0.0000f,0.2618f,-0.0309f, 0.0000f,0.8189f,-0.5625f,  -0.0119f,0.2200f,-0.0162f, -0.4375f,0.6614f,-0.6016f,  -0.0107f,0.2304f,-0.0145f, -0.5625f,-0.2422f,-0.7813f,  -0.0163f,0.2423f,-0.0222f, -0.4609f,-0.6094f,-0.6328f,  -0.0213f,0.2535f,-0.0290f, -0.5859f,-0.0469f,-0.8047f,  -0.0184f,0.2618f,-0.0250f, -0.3281f,0.8189f,-0.4531f,  -0.0162f,0.2200f,-0.0119f, -0.6016f,0.6614f,-0.4375f,  -0.0145f,0.2304f,-0.0107f, -0.7813f,-0.2422f,-0.5625f,  -0.0222f,0.2423f,-0.0163f, -0.6328f,-0.6094f,-0.4609f,  -0.0290f,0.2535f,-0.0213f, -0.8047f,-0.0469f,-0.5859f,  -0.0250f,0.2618f,-0.0184f, -0.4531f,0.8189f,-0.3281f,  -0.0190f,0.2200f,-0.0064f, -0.7031f,0.6614f,-0.2266f,  -0.0170f,0.2304f,-0.0057f, -0.9219f,-0.2422f,-0.2969f,  -0.0260f,0.2423f,-0.0088f, -0.7500f,-0.6094f,-0.2422f,  -0.0340f,0.2535f,-0.0115f, -0.9453f,-0.0469f,-0.3047f,  -0.0293f,0.2618f,-0.0099f, -0.5391f,0.8189f,-0.1719f,  0.0190f,0.2200f,-0.0064f, 0.7008f,0.6614f,-0.2266f,  0.0170f,0.2304f,-0.0057f, 0.9213f,-0.2422f,-0.2969f,  0.0260f,0.2423f,-0.0088f, 0.7480f,-0.6094f,-0.2422f,  0.0340f,0.2535f,-0.0115f, 0.9449f,-0.0469f,-0.3047f,  0.0293f,0.2618f,-0.0099f, 0.5354f,0.8189f,-0.1719f,  0.0162f,0.2200f,-0.0119f, 0.5984f,0.6614f,-0.4375f,  0.0145f,0.2304f,-0.0107f, 0.7795f,-0.2422f,-0.5625f,  0.0222f,0.2423f,-0.0163f, 0.6378f,-0.6094f,-0.4609f,  0.0290f,0.2535f,-0.0213f, 0.8031f,-0.0469f,-0.5859f,  0.0250f,0.2618f,-0.0184f, 0.4567f,0.8189f,-0.3281f,  0.0119f,0.2200f,-0.0162f, 0.4331f,0.6614f,-0.6016f,  0.0107f,0.2304f,-0.0145f, 0.5669f,-0.2422f,-0.7813f,  0.0163f,0.2423f,-0.0222f, 0.4567f,-0.6094f,-0.6328f,  0.0213f,0.2535f,-0.0290f, 0.5827f,-0.0469f,-0.8047f,  0.0184f,0.2618f,-0.0250f, 0.3307f,0.8189f,-0.4531f,  0.0064f,0.2200f,-0.0190f, 0.2283f,0.6614f,-0.7031f,  0.0057f,0.2304f,-0.0170f, 0.2913f,-0.2422f,-0.9219f,  0.0088f,0.2423f,-0.0260f, 0.2362f,-0.6094f,-0.7500f,  0.0115f,0.2535f,-0.0340f, 0.3071f,-0.0469f,-0.9453f,  0.0099f,0.2618f,-0.0293f, 0.1732f,0.8189f,-0.5391f,  0.0415f,0.1900f,0.1235f, 0.1890f,0.7874f,0.5827f,  0.0384f,0.1974f,0.1144f, 0.1339f,0.8898f,0.4173f,  0.0000f,0.1974f,0.1205f, 0.0000f,0.8898f,0.4409f,  0.0000f,0.1900f,0.1300f, 0.0000f,0.7874f,0.6142f,  0.0310f,0.2027f,0.0922f, 0.0551f,0.9764f,0.1732f,  0.0000f,0.2027f,0.0970f, 0.0000f,0.9764f,0.1890f,  0.0215f,0.2073f,0.0640f, 0.0472f,0.9843f,0.1575f,  0.0000f,0.2073f,0.0674f, 0.0000f,0.9843f,0.1654f,  0.0125f,0.2126f,0.0372f, 0.0787f,0.9606f,0.2520f,  0.0000f,0.2126f,0.0391f, 0.0000f,0.9606f,0.2598f,  0.0772f,0.1900f,0.1052f, 0.3543f,0.7874f,0.4961f,  0.0716f,0.1974f,0.0975f, 0.2598f,0.8898f,0.3543f,  0.0576f,0.2027f,0.0785f, 0.1102f,0.9764f,0.1496f,  0.0400f,0.2073f,0.0545f, 0.0945f,0.9843f,0.1339f,  0.0232f,0.2126f,0.0317f, 0.1496f,0.9606f,0.2126f,  0.1052f,0.1900f,0.0772f, 0.4961f,0.7874f,0.3543f,  0.0975f,0.1974f,0.0716f, 0.3543f,0.8898f,0.2598f,  0.0785f,0.2027f,0.0576f, 0.1496f,0.9764f,0.1102f,  0.0545f,0.2073f,0.0400f, 0.1339f,0.9843f,0.0945f,  0.0317f,0.2126f,0.0232f, 0.2126f,0.9606f,0.1496f,  0.1235f,0.1900f,0.0415f, 0.5827f,0.7874f,0.1890f,  0.1144f,0.1974f,0.0384f, 0.4173f,0.8898f,0.1339f,  0.0922f,0.2027f,0.0310f, 0.1732f,0.9764f,0.0551f,  0.0640f,0.2073f,0.0215f, 0.1575f,0.9843f,0.0472f,  0.0372f,0.2126f,0.0125f, 0.2520f,0.9606f,0.0787f,  0.1300f,0.1900f,0.0000f, 0.6142f,0.7874f,0.0000f,  0.1205f,0.1974f,0.0000f, 0.4409f,0.8898f,0.0000f,  0.0970f,0.2027f,0.0000f, 0.1890f,0.9764f,0.0000f,  0.0674f,0.2073f,0.0000f, 0.1654f,0.9843f,0.0000f,  0.0391f,0.2126f,0.0000f, 0.2598f,0.9606f,0.0000f,  -0.1235f,0.1900f,0.0415f, -0.5781f,0.7874f,0.1890f,  -0.1144f,0.1974f,0.0384f, -0.4219f,0.8898f,0.1339f,  -0.1205f,0.1974f,0.0000f, -0.4453f,0.8898f,0.0000f,  -0.1300f,0.1900f,0.0000f, -0.6094f,0.7874f,0.0000f,  -0.0922f,0.2027f,0.0310f, -0.1797f,0.9764f,0.0551f,  -0.0970f,0.2027f,0.0000f, -0.1875f,0.9764f,0.0000f,  -0.0640f,0.2073f,0.0215f, -0.1563f,0.9843f,0.0472f,  -0.0674f,0.2073f,0.0000f, -0.1641f,0.9843f,0.0000f,  -0.0372f,0.2126f,0.0125f, -0.2500f,0.9606f,0.0787f,  -0.0391f,0.2126f,0.0000f, -0.2656f,0.9606f,0.0000f,  -0.1052f,0.1900f,0.0772f, -0.4922f,0.7874f,0.3543f,  -0.0975f,0.1974f,0.0716f, -0.3594f,0.8898f,0.2598f,  -0.0785f,0.2027f,0.0576f, -0.1484f,0.9764f,0.1102f,  -0.0545f,0.2073f,0.0400f, -0.1328f,0.9843f,0.0945f,  -0.0317f,0.2126f,0.0232f, -0.2109f,0.9606f,0.1496f,  -0.0772f,0.1900f,0.1052f, -0.3594f,0.7874f,0.4961f,  -0.0716f,0.1974f,0.0975f, -0.2578f,0.8898f,0.3543f,  -0.0576f,0.2027f,0.0785f, -0.1094f,0.9764f,0.1496f,  -0.0400f,0.2073f,0.0545f, -0.0938f,0.9843f,0.1339f,  -0.0232f,0.2126f,0.0317f, -0.1484f,0.9606f,0.2126f,  -0.0415f,0.1900f,0.1235f, -0.1875f,0.7874f,0.5827f,  -0.0384f,0.1974f,0.1144f, -0.1328f,0.8898f,0.4173f,  -0.0310f,0.2027f,0.0922f, -0.0547f,0.9764f,0.1732f,  -0.0215f,0.2073f,0.0640f, -0.0469f,0.9843f,0.1575f,  -0.0125f,0.2126f,0.0372f, -0.0781f,0.9606f,0.2520f,  -0.0415f,0.1900f,-0.1235f, -0.1875f,0.7874f,-0.5781f,  -0.0384f,0.1974f,-0.1144f, -0.1328f,0.8898f,-0.4219f,  0.0000f,0.1974f,-0.1205f, 0.0000f,0.8898f,-0.4453f,  0.0000f,0.1900f,-0.1300f, 0.0000f,0.7874f,-0.6094f,  -0.0310f,0.2027f,-0.0922f, -0.0547f,0.9764f,-0.1797f,  0.0000f,0.2027f,-0.0970f, 0.0000f,0.9764f,-0.1875f,  -0.0215f,0.2073f,-0.0640f, -0.0469f,0.9843f,-0.1563f,  0.0000f,0.2073f,-0.0674f, 0.0000f,0.9843f,-0.1641f,  -0.0125f,0.2126f,-0.0372f, -0.0781f,0.9606f,-0.2500f,  0.0000f,0.2126f,-0.0391f, 0.0000f,0.9606f,-0.2656f,  -0.0772f,0.1900f,-0.1052f, -0.3594f,0.7874f,-0.4922f,  -0.0716f,0.1974f,-0.0975f, -0.2578f,0.8898f,-0.3594f,  -0.0576f,0.2027f,-0.0785f, -0.1094f,0.9764f,-0.1484f,  -0.0400f,0.2073f,-0.0545f, -0.0938f,0.9843f,-0.1328f,  -0.0232f,0.2126f,-0.0317f, -0.1484f,0.9606f,-0.2109f,  -0.1052f,0.1900f,-0.0772f, -0.4922f,0.7874f,-0.3594f,  -0.0975f,0.1974f,-0.0716f, -0.3594f,0.8898f,-0.2578f,  -0.0785f,0.2027f,-0.0576f, -0.1484f,0.9764f,-0.1094f,  -0.0545f,0.2073f,-0.0400f, -0.1328f,0.9843f,-0.0938f,  -0.0317f,0.2126f,-0.0232f, -0.2109f,0.9606f,-0.1484f,  -0.1235f,0.1900f,-0.0415f, -0.5781f,0.7874f,-0.1875f,  -0.1144f,0.1974f,-0.0384f, -0.4219f,0.8898f,-0.1328f,  -0.0922f,0.2027f,-0.0310f, -0.1797f,0.9764f,-0.0547f,  -0.0640f,0.2073f,-0.0215f, -0.1563f,0.9843f,-0.0469f,  -0.0372f,0.2126f,-0.0125f, -0.2500f,0.9606f,-0.0781f,  0.1235f,0.1900f,-0.0415f, 0.5827f,0.7874f,-0.1875f,  0.1144f,0.1974f,-0.0384f, 0.4173f,0.8898f,-0.1328f,  0.0922f,0.2027f,-0.0310f, 0.1732f,0.9764f,-0.0547f,  0.0640f,0.2073f,-0.0215f, 0.1575f,0.9843f,-0.0469f,  0.0372f,0.2126f,-0.0125f, 0.2520f,0.9606f,-0.0781f,  0.1052f,0.1900f,-0.0772f, 0.4961f,0.7874f,-0.3594f,  0.0975f,0.1974f,-0.0716f, 0.3543f,0.8898f,-0.2578f,  0.0785f,0.2027f,-0.0576f, 0.1496f,0.9764f,-0.1094f,  0.0545f,0.2073f,-0.0400f, 0.1339f,0.9843f,-0.0938f,  0.0317f,0.2126f,-0.0232f, 0.2126f,0.9606f,-0.1484f,  0.0772f,0.1900f,-0.1052f, 0.3543f,0.7874f,-0.4922f,  0.0716f,0.1974f,-0.0975f, 0.2598f,0.8898f,-0.3594f,  0.0576f,0.2027f,-0.0785f, 0.1102f,0.9764f,-0.1484f,  0.0400f,0.2073f,-0.0545f, 0.0945f,0.9843f,-0.1328f,  0.0232f,0.2126f,-0.0317f, 0.1496f,0.9606f,-0.2109f,  0.0415f,0.1900f,-0.1235f, 0.1890f,0.7874f,-0.5781f,  0.0384f,0.1974f,-0.1144f, 0.1339f,0.8898f,-0.4219f,  0.0310f,0.2027f,-0.0922f, 0.0551f,0.9764f,-0.1797f,  0.0215f,0.2073f,-0.0640f, 0.0472f,0.9843f,-0.1563f,  0.0125f,0.2126f,-0.0372f, 0.0787f,0.9606f,-0.2500f,
	};
	static unsigned s_teapotIndices[] = {
		0, 1, 2, 0, 2, 3, 1, 4, 5, 1, 5, 2, 4, 6, 7, 4, 7, 5, 6, 8, 9, 6, 9, 7, 8, 10, 11, 8, 11, 9, 12, 13, 1, 12, 1, 0, 13, 14, 4, 13, 4, 1, 14, 15, 6, 14, 6, 4, 15, 16, 8, 15, 8, 6, 16, 17, 10, 16, 10, 8, 18, 19, 13, 18, 13, 12, 19, 20, 14, 19, 14, 13, 20, 21, 15, 20, 15, 14, 21, 22, 16, 21, 16, 15, 22, 23, 17, 22, 17, 16, 24, 25, 19, 24, 19, 18, 25, 26, 20, 25, 20, 19, 26, 27, 21, 26, 21, 20, 27, 28, 22, 27, 22, 21, 28, 29, 23, 28, 23, 22, 30, 31, 25, 30, 25, 24, 31, 32, 26, 31, 26, 25, 32, 33, 27, 32, 27, 26, 33, 34, 28, 33, 28, 27, 34, 35, 29, 34, 29, 28, 36, 37, 38, 36, 38, 39, 37, 40, 41, 37, 41, 38, 40, 42, 43, 40, 43, 41, 42, 44, 45, 42, 45, 43, 44, 46, 47, 44, 47, 45, 48, 49, 37, 48, 37, 36, 49, 50, 40, 49, 40, 37, 50, 51, 42, 50, 42, 40, 51, 52, 44, 51, 44, 42, 52, 53, 46, 52, 46, 44, 54, 55, 49, 54, 49, 48, 55, 56, 50, 55, 50, 49, 56, 57, 51, 56, 51, 50, 57, 58, 52, 57, 52, 51, 58, 59, 53, 58, 53, 52, 60, 61, 55, 60, 55, 54, 61, 62, 56, 61, 56, 55, 62, 63, 57, 62, 57, 56, 63, 64, 58, 63, 58, 57, 64, 65, 59, 64, 59, 58, 3, 2, 61, 3, 61, 60, 2, 5, 62, 2, 62, 61, 5, 7, 63, 5, 63, 62, 7, 9, 64, 7, 64, 63, 9, 11, 65, 9, 65, 64, 66, 67, 68, 66, 68, 69, 67, 70, 71, 67, 71, 68, 70, 72, 73, 70, 73, 71, 72, 74, 75, 72, 75, 73, 74, 76, 77, 74, 77, 75, 78, 79, 67, 78, 67, 66, 79, 80, 70, 79, 70, 67, 80, 81, 72, 80, 72, 70, 81, 82, 74, 81, 74, 72, 82, 83, 76, 82, 76, 74, 84, 85, 79, 84, 79, 78, 85, 86, 80, 85, 80, 79, 86, 87, 81, 86, 81, 80, 87, 88, 82, 87, 82, 81, 88, 89, 83, 88, 83, 82, 90, 91, 85, 90, 85, 84, 91, 92, 86, 91, 86, 85, 92, 93, 87, 92, 87, 86, 93, 94, 88, 93, 88, 87, 94, 95, 89, 94, 89, 88, 39, 38, 91, 39, 91, 90, 38, 41, 92, 38, 92, 91, 41, 43, 93, 41, 93, 92, 43, 45, 94, 43, 94, 93, 45, 47, 95, 45, 95, 94, 96, 97, 31, 96, 31, 30, 97, 98, 32, 97, 32, 31, 98, 99, 33, 98, 33, 32, 99, 100, 34, 99, 34, 33, 100, 101, 35, 100, 35, 34, 102, 103, 97, 102, 97, 96, 103, 104, 98, 103, 98, 97, 104, 105, 99, 104, 99, 98, 105, 106, 100, 105, 100, 99, 106, 107, 101, 106, 101, 100, 108, 109, 103, 108, 103, 102, 109, 110, 104, 109, 104, 103, 110, 111, 105, 110, 105, 104, 111, 112, 106, 111, 106, 105, 112, 113, 107, 112, 107, 106, 114, 115, 109, 114, 109, 108, 115, 116, 110, 115, 110, 109, 116, 117, 111, 116, 111, 110, 117, 118, 112, 117, 112, 111, 118, 119, 113, 118, 113, 112, 69, 68, 115, 69, 115, 114, 68, 71, 116, 68, 116, 115, 71, 73, 117, 71, 117, 116, 73, 75, 118, 73, 118, 117, 75, 77, 119, 75, 119, 118, 120, 121, 122, 120, 122, 123, 121, 124, 125, 121, 125, 122, 124, 126, 127, 124, 127, 125, 126, 128, 129, 126, 129, 127, 128, 0, 3, 128, 3, 129, 130, 131, 121, 130, 121, 120, 131, 132, 124, 131, 124, 121, 132, 133, 126, 132, 126, 124, 133, 134, 128, 133, 128, 126, 134, 12, 0, 134, 0, 128, 135, 136, 131, 135, 131, 130, 136, 137, 132, 136, 132, 131, 137, 138, 133, 137, 133, 132, 138, 139, 134, 138, 134, 133, 139, 18, 12, 139, 12, 134, 140, 141, 136, 140, 136, 135, 141, 142, 137, 141, 137, 136, 142, 143, 138, 142, 138, 137, 143, 144, 139, 143, 139, 138, 144, 24, 18, 144, 18, 139, 145, 146, 141, 145, 141, 140, 146, 147, 142, 146, 142, 141, 147, 148, 143, 147, 143, 142, 148, 149, 144, 148, 144, 143, 149, 30, 24, 149, 24, 144, 150, 151, 152, 150, 152, 153, 151, 154, 155, 151, 155, 152, 154, 156, 157, 154, 157, 155, 156, 158, 159, 156, 159, 157, 158, 36, 39, 158, 39, 159, 160, 161, 151, 160, 151, 150, 161, 162, 154, 161, 154, 151, 162, 163, 156, 162, 156, 154, 163, 164, 158, 163, 158, 156, 164, 48, 36, 164, 36, 158, 165, 166, 161, 165, 161, 160, 166, 167, 162, 166, 162, 161, 167, 168, 163, 167, 163, 162, 168, 169, 164, 168, 164, 163, 169, 54, 48, 169, 48, 164, 170, 171, 166, 170, 166, 165, 171, 172, 167, 171, 167, 166, 172, 173, 168, 172, 168, 167, 173, 174, 169, 173, 169, 168, 174, 60, 54, 174, 54, 169, 123, 122, 171, 123, 171, 170, 122, 125, 172, 122, 172, 171, 125, 127, 173, 125, 173, 172, 127, 129, 174, 127, 174, 173, 129, 3, 60, 129, 60, 174, 175, 176, 177, 175, 177, 178, 176, 179, 180, 176, 180, 177, 179, 181, 182, 179, 182, 180, 181, 183, 184, 181, 184, 182, 183, 66, 69, 183, 69, 184, 185, 186, 176, 185, 176, 175, 186, 187, 179, 186, 179, 176, 187, 188, 181, 187, 181, 179, 188, 189, 183, 188, 183, 181, 189, 78, 66, 189, 66, 183, 190, 191, 186, 190, 186, 185, 191, 192, 187, 191, 187, 186, 192, 193, 188, 192, 188, 187, 193, 194, 189, 193, 189, 188, 194, 84, 78, 194, 78, 189, 195, 196, 191, 195, 191, 190, 196, 197, 192, 196, 192, 191, 197, 198, 193, 197, 193, 192, 198, 199, 194, 198, 194, 193, 199, 90, 84, 199, 84, 194, 153, 152, 196, 153, 196, 195, 152, 155, 197, 152, 197, 196, 155, 157, 198, 155, 198, 197, 157, 159, 199, 157, 199, 198, 159, 39, 90, 159, 90, 199, 200, 201, 146, 200, 146, 145, 201, 202, 147, 201, 147, 146, 202, 203, 148, 202, 148, 147, 203, 204, 149, 203, 149, 148, 204, 96, 30, 204, 30, 149, 205, 206, 201, 205, 201, 200, 206, 207, 202, 206, 202, 201, 207, 208, 203, 207, 203, 202, 208, 209, 204, 208, 204, 203, 209, 102, 96, 209, 96, 204, 210, 211, 206, 210, 206, 205, 211, 212, 207, 211, 207, 206, 212, 213, 208, 212, 208, 207, 213, 214, 209, 213, 209, 208, 214, 108, 102, 214, 102, 209, 215, 216, 211, 215, 211, 210, 216, 217, 212, 216, 212, 211, 217, 218, 213, 217, 213, 212, 218, 219, 214, 218, 214, 213, 219, 114, 108, 219, 108, 214, 178, 177, 216, 178, 216, 215, 177, 180, 217, 177, 217, 216, 180, 182, 218, 180, 218, 217, 182, 184, 219, 182, 219, 218, 184, 69, 114, 184, 114, 219, 220, 221, 222, 220, 222, 223, 221, 224, 225, 221, 225, 222, 224, 226, 227, 224, 227, 225, 226, 228, 229, 226, 229, 227, 228, 120, 123, 228, 123, 229, 230, 231, 221, 230, 221, 220, 231, 232, 224, 231, 224, 221, 232, 233, 226, 232, 226, 224, 233, 234, 228, 233, 228, 226, 234, 130, 120, 234, 120, 228, 235, 236, 231, 235, 231, 230, 236, 237, 232, 236, 232, 231, 237, 238, 233, 237, 233, 232, 238, 239, 234, 238, 234, 233, 239, 135, 130, 239, 130, 234, 240, 241, 236, 240, 236, 235, 241, 242, 237, 241, 237, 236, 242, 243, 238, 242, 238, 237, 243, 244, 239, 243, 239, 238, 244, 140, 135, 244, 135, 239, 245, 246, 241, 245, 241, 240, 246, 247, 242, 246, 242, 241, 247, 248, 243, 247, 243, 242, 248, 249, 244, 248, 244, 243, 249, 145, 140, 249, 140, 244, 250, 251, 252, 250, 252, 253, 251, 254, 255, 251, 255, 252, 254, 256, 257, 254, 257, 255, 256, 258, 259, 256, 259, 257, 258, 150, 153, 258, 153, 259, 260, 261, 251, 260, 251, 250, 261, 262, 254, 261, 254, 251, 262, 263, 256, 262, 256, 254, 263, 264, 258, 263, 258, 256, 264, 160, 150, 264, 150, 258, 265, 266, 261, 265, 261, 260, 266, 267, 262, 266, 262, 261, 267, 268, 263, 267, 263, 262, 268, 269, 264, 268, 264, 263, 269, 165, 160, 269, 160, 264, 270, 271, 266, 270, 266, 265, 271, 272, 267, 271, 267, 266, 272, 273, 268, 272, 268, 267, 273, 274, 269, 273, 269, 268, 274, 170, 165, 274, 165, 269, 223, 222, 271, 223, 271, 270, 222, 225, 272, 222, 272, 271, 225, 227, 273, 225, 273, 272, 227, 229, 274, 227, 274, 273, 229, 123, 170, 229, 170, 274, 275, 276, 277, 275, 277, 278, 276, 279, 280, 276, 280, 277, 279, 281, 282, 279, 282, 280, 281, 283, 284, 281, 284, 282, 283, 175, 178, 283, 178, 284, 285, 286, 276, 285, 276, 275, 286, 287, 279, 286, 279, 276, 287, 288, 281, 287, 281, 279, 288, 289, 283, 288, 283, 281, 289, 185, 175, 289, 175, 283, 290, 291, 286, 290, 286, 285, 291, 292, 287, 291, 287, 286, 292, 293, 288, 292, 288, 287, 293, 294, 289, 293, 289, 288, 294, 190, 185, 294, 185, 289, 295, 296, 291, 295, 291, 290, 296, 297, 292, 296, 292, 291, 297, 298, 293, 297, 293, 292, 298, 299, 294, 298, 294, 293, 299, 195, 190, 299, 190, 294, 253, 252, 296, 253, 296, 295, 252, 255, 297, 252, 297, 296, 255, 257, 298, 255, 298, 297, 257, 259, 299, 257, 299, 298, 259, 153, 195, 259, 195, 299, 300, 301, 246, 300, 246, 245, 301, 302, 247, 301, 247, 246, 302, 303, 248, 302, 248, 247, 303, 304, 249, 303, 249, 248, 304, 200, 145, 304, 145, 249, 305, 306, 301, 305, 301, 300, 306, 307, 302, 306, 302, 301, 307, 308, 303, 307, 303, 302, 308, 309, 304, 308, 304, 303, 309, 205, 200, 309, 200, 304, 310, 311, 306, 310, 306, 305, 311, 312, 307, 311, 307, 306, 312, 313, 308, 312, 308, 307, 313, 314, 309, 313, 309, 308, 314, 210, 205, 314, 205, 309, 315, 316, 311, 315, 311, 310, 316, 317, 312, 316, 312, 311, 317, 318, 313, 317, 313, 312, 318, 319, 314, 318, 314, 313, 319, 215, 210, 319, 210, 314, 278, 277, 316, 278, 316, 315, 277, 280, 317, 277, 317, 316, 280, 282, 318, 280, 318, 317, 282, 284, 319, 282, 319, 318, 284, 178, 215, 284, 215, 319, 320, 321, 322, 320, 322, 278, 321, 323, 324, 321, 324, 322, 323, 325, 326, 323, 326, 324, 325, 327, 328, 325, 328, 326, 327, 329, 328, 310, 330, 321, 310, 321, 320, 330, 331, 323, 330, 323, 321, 331, 332, 325, 331, 325, 323, 332, 333, 327, 332, 327, 325, 333, 329, 327, 305, 334, 330, 305, 330, 310, 334, 335, 331, 334, 331, 330, 335, 336, 332, 335, 332, 331, 336, 337, 333, 336, 333, 332, 337, 329, 333, 338, 339, 334, 338, 334, 305, 339, 340, 335, 339, 335, 334, 340, 341, 336, 340, 336, 335, 341, 342, 337, 341, 337, 336, 342, 329, 337, 245, 343, 339, 245, 339, 338, 343, 344, 340, 343, 340, 339, 344, 345, 341, 344, 341, 340, 345, 346, 342, 345, 342, 341, 346, 329, 342, 347, 348, 349, 347, 349, 253, 348, 350, 351, 348, 351, 349, 350, 352, 353, 350, 353, 351, 352, 354, 355, 352, 355, 353, 354, 329, 355, 290, 356, 348, 290, 348, 347, 356, 357, 350, 356, 350, 348, 357, 358, 352, 357, 352, 350, 358, 359, 354, 358, 354, 352, 359, 329, 354, 285, 360, 356, 285, 356, 290, 360, 361, 357, 360, 357, 356, 361, 362, 358, 361, 358, 357, 362, 363, 359, 362, 359, 358, 363, 329, 359, 364, 365, 360, 364, 360, 285, 365, 366, 361, 365, 361, 360, 366, 367, 362, 366, 362, 361, 367, 368, 363, 367, 363, 362, 368, 329, 363, 278, 322, 365, 278, 365, 364, 322, 324, 366, 322, 366, 365, 324, 326, 367, 324, 367, 366, 326, 328, 368, 326, 368, 367, 328, 329, 368, 369, 370, 371, 369, 371, 223, 370, 372, 373, 370, 373, 371, 372, 374, 375, 372, 375, 373, 374, 376, 377, 374, 377, 375, 376, 329, 377, 265, 378, 370, 265, 370, 369, 378, 379, 372, 378, 372, 370, 379, 380, 374, 379, 374, 372, 380, 381, 376, 380, 376, 374, 381, 329, 376, 260, 382, 378, 260, 378, 265, 382, 383, 379, 382, 379, 378, 383, 384, 380, 383, 380, 379, 384, 385, 381, 384, 381, 380, 385, 329, 381, 386, 387, 382, 386, 382, 260, 387, 388, 383, 387, 383, 382, 388, 389, 384, 388, 384, 383, 389, 390, 385, 389, 385, 384, 390, 329, 385, 253, 349, 387, 253, 387, 386, 349, 351, 388, 349, 388, 387, 351, 353, 389, 351, 389, 388, 353, 355, 390, 353, 390, 389, 355, 329, 390, 391, 392, 343, 391, 343, 245, 392, 393, 344, 392, 344, 343, 393, 394, 345, 393, 345, 344, 394, 395, 346, 394, 346, 345, 395, 329, 346, 235, 396, 392, 235, 392, 391, 396, 397, 393, 396, 393, 392, 397, 398, 394, 397, 394, 393, 398, 399, 395, 398, 395, 394, 399, 329, 395, 230, 400, 396, 230, 396, 235, 400, 401, 397, 400, 397, 396, 401, 402, 398, 401, 398, 397, 402, 403, 399, 402, 399, 398, 403, 329, 399, 404, 405, 400, 404, 400, 230, 405, 406, 401, 405, 401, 400, 406, 407, 402, 406, 402, 401, 407, 408, 403, 407, 403, 402, 408, 329, 403, 223, 371, 405, 223, 405, 404, 371, 373, 406, 371, 406, 405, 373, 375, 407, 373, 407, 406, 375, 377, 408, 375, 408, 407, 377, 329, 408, 409, 410, 411, 409, 411, 412, 410, 413, 414, 410, 414, 411, 413, 415, 416, 413, 416, 414, 415, 417, 418, 415, 418, 416, 417, 419, 420, 417, 420, 418, 421, 422, 410, 421, 410, 409, 422, 423, 413, 422, 413, 410, 423, 424, 415, 423, 415, 413, 424, 425, 417, 424, 417, 415, 425, 426, 419, 425, 419, 417, 427, 428, 422, 427, 422, 421, 428, 429, 423, 428, 423, 422, 429, 430, 424, 429, 424, 423, 430, 431, 425, 430, 425, 424, 431, 432, 426, 431, 426, 425, 433, 434, 428, 433, 428, 427, 434, 435, 429, 434, 429, 428, 435, 436, 430, 435, 430, 429, 436, 437, 431, 436, 431, 430, 437, 438, 432, 437, 432, 431, 439, 440, 434, 439, 434, 433, 440, 441, 435, 440, 435, 434, 441, 442, 436, 441, 436, 435, 442, 443, 437, 442, 437, 436, 443, 444, 438, 443, 438, 437, 445, 446, 440, 445, 440, 439, 446, 447, 441, 446, 441, 440, 447, 448, 442, 447, 442, 441, 448, 449, 443, 448, 443, 442, 449, 450, 444, 449, 444, 443, 451, 452, 446, 451, 446, 445, 452, 453, 447, 452, 447, 446, 453, 454, 448, 453, 448, 447, 454, 455, 449, 454, 449, 448, 455, 456, 450, 455, 450, 449, 457, 458, 452, 457, 452, 451, 458, 459, 453, 458, 453, 452, 459, 460, 454, 459, 454, 453, 460, 461, 455, 460, 455, 454, 461, 462, 456, 461, 456, 455, 463, 464, 458, 463, 458, 457, 464, 465, 459, 464, 459, 458, 465, 466, 460, 465, 460, 459, 466, 467, 461, 466, 461, 460, 467, 468, 462, 467, 462, 461, 412, 411, 464, 412, 464, 463, 411, 414, 465, 411, 465, 464, 414, 416, 466, 414, 466, 465, 416, 418, 467, 416, 467, 466, 418, 420, 468, 418, 468, 467, 469, 470, 471, 469, 471, 472, 470, 473, 474, 470, 474, 471, 473, 475, 476, 473, 476, 474, 475, 477, 478, 475, 478, 476, 477, 409, 412, 477, 412, 478, 479, 480, 470, 479, 470, 469, 480, 481, 473, 480, 473, 470, 481, 482, 475, 481, 475, 473, 482, 483, 477, 482, 477, 475, 483, 421, 409, 483, 409, 477, 484, 485, 480, 484, 480, 479, 485, 486, 481, 485, 481, 480, 486, 487, 482, 486, 482, 481, 487, 488, 483, 487, 483, 482, 488, 427, 421, 488, 421, 483, 489, 490, 485, 489, 485, 484, 490, 491, 486, 490, 486, 485, 491, 492, 487, 491, 487, 486, 492, 493, 488, 492, 488, 487, 493, 433, 427, 493, 427, 488, 153, 494, 490, 153, 490, 489, 494, 495, 491, 494, 491, 490, 495, 496, 492, 495, 492, 491, 496, 497, 493, 496, 493, 492, 497, 439, 433, 497, 433, 493, 498, 499, 494, 498, 494, 153, 499, 500, 495, 499, 495, 494, 500, 501, 496, 500, 496, 495, 501, 502, 497, 501, 497, 496, 502, 445, 439, 502, 439, 497, 503, 504, 499, 503, 499, 498, 504, 505, 500, 504, 500, 499, 505, 506, 501, 505, 501, 500, 506, 507, 502, 506, 502, 501, 507, 451, 445, 507, 445, 502, 508, 509, 504, 508, 504, 503, 509, 510, 505, 509, 505, 504, 510, 511, 506, 510, 506, 505, 511, 512, 507, 511, 507, 506, 512, 457, 451, 512, 451, 507, 513, 514, 509, 513, 509, 508, 514, 515, 510, 514, 510, 509, 515, 516, 511, 515, 511, 510, 516, 517, 512, 516, 512, 511, 517, 463, 457, 517, 457, 512, 472, 471, 514, 472, 514, 513, 471, 474, 515, 471, 515, 514, 474, 476, 516, 474, 516, 515, 476, 478, 517, 476, 517, 516, 478, 412, 463, 478, 463, 517, 518, 519, 520, 518, 520, 521, 519, 522, 523, 519, 523, 520, 522, 524, 525, 522, 525, 523, 524, 526, 527, 524, 527, 525, 526, 528, 529, 526, 529, 527, 530, 531, 519, 530, 519, 518, 531, 532, 522, 531, 522, 519, 532, 533, 524, 532, 524, 522, 533, 534, 526, 533, 526, 524, 534, 535, 528, 534, 528, 526, 536, 537, 531, 536, 531, 530, 537, 538, 532, 537, 532, 531, 538, 539, 533, 538, 533, 532, 539, 540, 534, 539, 534, 533, 540, 541, 535, 540, 535, 534, 542, 543, 537, 542, 537, 536, 543, 544, 538, 543, 538, 537, 544, 545, 539, 544, 539, 538, 545, 546, 540, 545, 540, 539, 546, 547, 541, 546, 541, 540, 548, 549, 543, 548, 543, 542, 549, 550, 544, 549, 544, 543, 550, 551, 545, 550, 545, 544, 551, 552, 546, 551, 546, 545, 552, 553, 547, 552, 547, 546, 554, 555, 549, 554, 549, 548, 555, 556, 550, 555, 550, 549, 556, 557, 551, 556, 551, 550, 557, 558, 552, 557, 552, 551, 558, 559, 553, 558, 553, 552, 560, 561, 555, 560, 555, 554, 561, 562, 556, 561, 556, 555, 562, 563, 557, 562, 557, 556, 563, 564, 558, 563, 558, 557, 564, 565, 559, 564, 559, 558, 566, 567, 561, 566, 561, 560, 567, 568, 562, 567, 562, 561, 568, 569, 563, 568, 563, 562, 569, 570, 564, 569, 564, 563, 570, 571, 565, 570, 565, 564, 572, 573, 567, 572, 567, 566, 573, 574, 568, 573, 568, 567, 574, 575, 569, 574, 569, 568, 575, 576, 570, 575, 570, 569, 576, 577, 571, 576, 571, 570, 521, 520, 573, 521, 573, 572, 520, 523, 574, 520, 574, 573, 523, 525, 575, 523, 575, 574, 525, 527, 576, 525, 576, 575, 527, 529, 577, 527, 577, 576, 578, 579, 580, 578, 580, 581, 579, 582, 583, 579, 583, 580, 582, 584, 585, 582, 585, 583, 584, 586, 587, 584, 587, 585, 586, 518, 521, 586, 521, 587, 588, 589, 579, 588, 579, 578, 589, 590, 582, 589, 582, 579, 590, 591, 584, 590, 584, 582, 591, 592, 586, 591, 586, 584, 592, 530, 518, 592, 518, 586, 593, 594, 589, 593, 589, 588, 594, 595, 590, 594, 590, 589, 595, 596, 591, 595, 591, 590, 596, 597, 592, 596, 592, 591, 597, 536, 530, 597, 530, 592, 598, 599, 594, 598, 594, 593, 599, 600, 595, 599, 595, 594, 600, 601, 596, 600, 596, 595, 601, 602, 597, 601, 597, 596, 602, 542, 536, 602, 536, 597, 603, 604, 599, 603, 599, 598, 604, 605, 600, 604, 600, 599, 605, 606, 601, 605, 601, 600, 606, 607, 602, 606, 602, 601, 607, 548, 542, 607, 542, 602, 608, 609, 604, 608, 604, 603, 609, 610, 605, 609, 605, 604, 610, 611, 606, 610, 606, 605, 611, 612, 607, 611, 607, 606, 612, 554, 548, 612, 548, 607, 613, 614, 609, 613, 609, 608, 614, 615, 610, 614, 610, 609, 615, 616, 611, 615, 611, 610, 616, 617, 612, 616, 612, 611, 617, 560, 554, 617, 554, 612, 618, 619, 614, 618, 614, 613, 619, 620, 615, 619, 615, 614, 620, 621, 616, 620, 616, 615, 621, 622, 617, 621, 617, 616, 622, 566, 560, 622, 560, 617, 623, 624, 619, 623, 619, 618, 624, 625, 620, 624, 620, 619, 625, 626, 621, 625, 621, 620, 626, 627, 622, 626, 622, 621, 627, 572, 566, 627, 566, 622, 581, 580, 624, 581, 624, 623, 580, 583, 625, 580, 625, 624, 583, 585, 626, 583, 626, 625, 585, 587, 627, 585, 627, 626, 587, 521, 572, 587, 572, 627, 628, 629, 630, 628, 630, 631, 629, 632, 633, 629, 633, 630, 632, 634, 635, 632, 635, 633, 634, 636, 637, 634, 637, 635, 636, 638, 637, 639, 640, 629, 639, 629, 628, 640, 641, 632, 640, 632, 629, 641, 642, 634, 641, 634, 632, 642, 643, 636, 642, 636, 634, 643, 638, 636, 644, 645, 640, 644, 640, 639, 645, 646, 641, 645, 641, 640, 646, 647, 642, 646, 642, 641, 647, 648, 643, 647, 643, 642, 648, 638, 643, 649, 650, 645, 649, 645, 644, 650, 651, 646, 650, 646, 645, 651, 652, 647, 651, 647, 646, 652, 653, 648, 652, 648, 647, 653, 638, 648, 654, 655, 650, 654, 650, 649, 655, 656, 651, 655, 651, 650, 656, 657, 652, 656, 652, 651, 657, 658, 653, 657, 653, 652, 658, 638, 653, 659, 660, 661, 659, 661, 662, 660, 663, 664, 660, 664, 661, 663, 665, 666, 663, 666, 664, 665, 667, 668, 665, 668, 666, 667, 638, 668, 669, 670, 660, 669, 660, 659, 670, 671, 663, 670, 663, 660, 671, 672, 665, 671, 665, 663, 672, 673, 667, 672, 667, 665, 673, 638, 667, 674, 675, 670, 674, 670, 669, 675, 676, 671, 675, 671, 670, 676, 677, 672, 676, 672, 671, 677, 678, 673, 677, 673, 672, 678, 638, 673, 679, 680, 675, 679, 675, 674, 680, 681, 676, 680, 676, 675, 681, 682, 677, 681, 677, 676, 682, 683, 678, 682, 678, 677, 683, 638, 678, 631, 630, 680, 631, 680, 679, 630, 633, 681, 630, 681, 680, 633, 635, 682, 633, 682, 681, 635, 637, 683, 635, 683, 682, 637, 638, 683, 684, 685, 686, 684, 686, 687, 685, 688, 689, 685, 689, 686, 688, 690, 691, 688, 691, 689, 690, 692, 693, 690, 693, 691, 692, 638, 693, 694, 695, 685, 694, 685, 684, 695, 696, 688, 695, 688, 685, 696, 697, 690, 696, 690, 688, 697, 698, 692, 697, 692, 690, 698, 638, 692, 699, 700, 695, 699, 695, 694, 700, 701, 696, 700, 696, 695, 701, 702, 697, 701, 697, 696, 702, 703, 698, 702, 698, 697, 703, 638, 698, 704, 705, 700, 704, 700, 699, 705, 706, 701, 705, 701, 700, 706, 707, 702, 706, 702, 701, 707, 708, 703, 707, 703, 702, 708, 638, 703, 662, 661, 705, 662, 705, 704, 661, 664, 706, 661, 706, 705, 664, 666, 707, 664, 707, 706, 666, 668, 708, 666, 708, 707, 668, 638, 708, 709, 710, 655, 709, 655, 654, 710, 711, 656, 710, 656, 655, 711, 712, 657, 711, 657, 656, 712, 713, 658, 712, 658, 657, 713, 638, 658, 714, 715, 710, 714, 710, 709, 715, 716, 711, 715, 711, 710, 716, 717, 712, 716, 712, 711, 717, 718, 713, 717, 713, 712, 718, 638, 713, 719, 720, 715, 719, 715, 714, 720, 721, 716, 720, 716, 715, 721, 722, 717, 721, 717, 716, 722, 723, 718, 722, 718, 717, 723, 638, 718, 724, 725, 720, 724, 720, 719, 725, 726, 721, 725, 721, 720, 726, 727, 722, 726, 722, 721, 727, 728, 723, 727, 723, 722, 728, 638, 723, 687, 686, 725, 687, 725, 724, 686, 689, 726, 686, 726, 725, 689, 691, 727, 689, 727, 726, 691, 693, 728, 691, 728, 727, 693, 638, 728, 729, 730, 731, 729, 731, 732, 730, 733, 734, 730, 734, 731, 733, 735, 736, 733, 736, 734, 735, 737, 738, 735, 738, 736, 737, 628, 631, 737, 631, 738, 739, 740, 730, 739, 730, 729, 740, 741, 733, 740, 733, 730, 741, 742, 735, 741, 735, 733, 742, 743, 737, 742, 737, 735, 743, 639, 628, 743, 628, 737, 744, 745, 740, 744, 740, 739, 745, 746, 741, 745, 741, 740, 746, 747, 742, 746, 742, 741, 747, 748, 743, 747, 743, 742, 748, 644, 639, 748, 639, 743, 749, 750, 745, 749, 745, 744, 750, 751, 746, 750, 746, 745, 751, 752, 747, 751, 747, 746, 752, 753, 748, 752, 748, 747, 753, 649, 644, 753, 644, 748, 754, 755, 750, 754, 750, 749, 755, 756, 751, 755, 751, 750, 756, 757, 752, 756, 752, 751, 757, 758, 753, 757, 753, 752, 758, 654, 649, 758, 649, 753, 759, 760, 761, 759, 761, 762, 760, 763, 764, 760, 764, 761, 763, 765, 766, 763, 766, 764, 765, 767, 768, 765, 768, 766, 767, 659, 662, 767, 662, 768, 769, 770, 760, 769, 760, 759, 770, 771, 763, 770, 763, 760, 771, 772, 765, 771, 765, 763, 772, 773, 767, 772, 767, 765, 773, 669, 659, 773, 659, 767, 774, 775, 770, 774, 770, 769, 775, 776, 771, 775, 771, 770, 776, 777, 772, 776, 772, 771, 777, 778, 773, 777, 773, 772, 778, 674, 669, 778, 669, 773, 779, 780, 775, 779, 775, 774, 780, 781, 776, 780, 776, 775, 781, 782, 777, 781, 777, 776, 782, 783, 778, 782, 778, 777, 783, 679, 674, 783, 674, 778, 732, 731, 780, 732, 780, 779, 731, 734, 781, 731, 781, 780, 734, 736, 782, 734, 782, 781, 736, 738, 783, 736, 783, 782, 738, 631, 679, 738, 679, 783, 784, 785, 786, 784, 786, 787, 785, 788, 789, 785, 789, 786, 788, 790, 791, 788, 791, 789, 790, 792, 793, 790, 793, 791, 792, 684, 687, 792, 687, 793, 794, 795, 785, 794, 785, 784, 795, 796, 788, 795, 788, 785, 796, 797, 790, 796, 790, 788, 797, 798, 792, 797, 792, 790, 798, 694, 684, 798, 684, 792, 799, 800, 795, 799, 795, 794, 800, 801, 796, 800, 796, 795, 801, 802, 797, 801, 797, 796, 802, 803, 798, 802, 798, 797, 803, 699, 694, 803, 694, 798, 804, 805, 800, 804, 800, 799, 805, 806, 801, 805, 801, 800, 806, 807, 802, 806, 802, 801, 807, 808, 803, 807, 803, 802, 808, 704, 699, 808, 699, 803, 762, 761, 805, 762, 805, 804, 761, 764, 806, 761, 806, 805, 764, 766, 807, 764, 807, 806, 766, 768, 808, 766, 808, 807, 768, 662, 704, 768, 704, 808, 809, 810, 755, 809, 755, 754, 810, 811, 756, 810, 756, 755, 811, 812, 757, 811, 757, 756, 812, 813, 758, 812, 758, 757, 813, 709, 654, 813, 654, 758, 814, 815, 810, 814, 810, 809, 815, 816, 811, 815, 811, 810, 816, 817, 812, 816, 812, 811, 817, 818, 813, 817, 813, 812, 818, 714, 709, 818, 709, 813, 819, 820, 815, 819, 815, 814, 820, 821, 816, 820, 816, 815, 821, 822, 817, 821, 817, 816, 822, 823, 818, 822, 818, 817, 823, 719, 714, 823, 714, 818, 824, 825, 820, 824, 820, 819, 825, 826, 821, 825, 821, 820, 826, 827, 822, 826, 822, 821, 827, 828, 823, 827, 823, 822, 828, 724, 719, 828, 719, 823, 787, 786, 825, 787, 825, 824, 786, 789, 826, 786, 826, 825, 789, 791, 827, 789, 827, 826, 791, 793, 828, 791, 828, 827, 793, 687, 724, 793, 724, 828,
	};

	static GLuint VertexArray;
	static GLuint VertexBuffer;
	Guizmo::Guizmo()
	{
		std::string pointVertexShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

#define kAntialiasing 2.0
uniform mat4 uViewProjMatrix;
layout(location=0) in vec4 aPositionSize;
layout(location=1) in vec4 aColor;

out VertexData vData;

void main()
{
	vData.m_color = aColor.abgr; // swizzle to correct endianness
	vData.m_color.a *= smoothstep(0.0, 1.0, aPositionSize.w / kAntialiasing);

	vData.m_size = max(aPositionSize.w, kAntialiasing);
	gl_Position = uViewProjMatrix * vec4(aPositionSize.xyz, 1.0);
	gl_PointSize = vData.m_size;
}
)";
		std::string pointFragmentShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

in VertexData vData;
#define kAntialiasing 2.0
layout(location=0) out vec4 fResult;

void main()
{
	fResult = vData.m_color;
	float d = length(gl_PointCoord.xy - vec2(0.5));
	//d=smoothstep(0.5, 0.5 - (kAntialiasing / vData.m_size), d);
    //d=smoothstep(0.5, 0.3, d);
	//fResult.a *= d;
    
}

)";
		pointShader = create_shader_program(pointVertexShader, pointFragmentShader, {});
		std::string lineVertexShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

#define kAntialiasing 2.0
uniform mat4 uViewProjMatrix;
layout(location=0) in vec4 aPositionSize;
layout(location=1) in vec4 aColor;

out VertexData vData;

void main()
{
	vData.m_color = aColor.abgr; // swizzle to correct endianness
	vData.m_color.a *= smoothstep(0.0, 1.0, aPositionSize.w / kAntialiasing);

	vData.m_size = max(aPositionSize.w, kAntialiasing);
	gl_Position = uViewProjMatrix * vec4(aPositionSize.xyz, 1.0);
}
)";
		std::string lineGeomertyShader = R"(
#version 330

#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

#define kAntialiasing 2.0

layout(lines) in;
layout(triangle_strip, max_vertices = 4) out;
	
uniform vec2 uViewport;
	
in  VertexData vData[];
out VertexData vDataOut;
	
void main() 
{
	vec2 pos0 = gl_in[0].gl_Position.xy / gl_in[0].gl_Position.w;
	vec2 pos1 = gl_in[1].gl_Position.xy / gl_in[1].gl_Position.w;
		
	vec2 dir = pos0 - pos1;
	dir = normalize(vec2(dir.x, dir.y * uViewport.y / uViewport.x)); // correct for aspect ratio
	vec2 tng0 = vec2(-dir.y, dir.x);
	vec2 tng1 = tng0 * vData[1].m_size / uViewport;
	tng0 = tng0 * vData[0].m_size / uViewport;
		
	// line start
	gl_Position = vec4((pos0 - tng0) * gl_in[0].gl_Position.w, gl_in[0].gl_Position.zw); 
	vDataOut.m_edgeDistance = -vData[0].m_size;
	vDataOut.m_size = vData[0].m_size;
	vDataOut.m_color = vData[0].m_color;
	EmitVertex();
		
	gl_Position = vec4((pos0 + tng0) * gl_in[0].gl_Position.w, gl_in[0].gl_Position.zw);
	vDataOut.m_color = vData[0].m_color;
	vDataOut.m_edgeDistance = vData[0].m_size;
	vDataOut.m_size = vData[0].m_size;
	EmitVertex();
		
	// line end
	gl_Position = vec4((pos1 - tng1) * gl_in[1].gl_Position.w, gl_in[1].gl_Position.zw);
	vDataOut.m_edgeDistance = -vData[1].m_size;
	vDataOut.m_size = vData[1].m_size;
	vDataOut.m_color = vData[1].m_color;
	EmitVertex();
		
	gl_Position = vec4((pos1 + tng1) * gl_in[1].gl_Position.w, gl_in[1].gl_Position.zw);
	vDataOut.m_color = vData[1].m_color;
	vDataOut.m_size = vData[1].m_size;
	vDataOut.m_edgeDistance = vData[1].m_size;
	EmitVertex();
}


)";
		std::string lineFragmentShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

in VertexData vData;
#define kAntialiasing 2.0
layout(location=0) out vec4 fResult;

void main()
{
	fResult = vData.m_color;
	float d = abs(vData.m_edgeDistance) / vData.m_size;
	d = smoothstep(1.0, 1.0 - (kAntialiasing / vData.m_size), d);
	fResult.a *= d;
    //fResult =vec4(vData.m_color.rgb,1.0);
}
)";
		lineShader = create_shader_program(lineGeomertyShader, lineVertexShader, lineFragmentShader, {});

		std::string triangleVertexShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

#define kAntialiasing 2.0
uniform mat4 uViewProjMatrix;

layout(location=0) in vec4 aPositionSize;
layout(location=1) in vec4 aColor;

out VertexData vData;

void main()
{
	vData.m_color = aColor.abgr; // swizzle to correct endianness

	vData.m_size = max(aPositionSize.w, kAntialiasing);
	gl_Position = uViewProjMatrix * vec4(aPositionSize.xyz, 1.0);
}
)";
		std::string triangleFragmentShader = R"(
#version 330
#define VertexData \
	_VertexData { \
		noperspective float m_edgeDistance; \
		noperspective float m_size; \
		smooth vec4 m_color; \
	}

in VertexData vData;
#define kAntialiasing 2.0
layout(location=0) out vec4 fResult;

void main()
{
	fResult = vData.m_color;
}

)";
		triangleShader = create_shader_program(triangleVertexShader, triangleFragmentShader, {});

		std::string teapotVertexShader = R"(
#version 330
uniform mat4 uWorldMatrix;
uniform mat4 uViewProjMatrix;

layout(location=0) in vec3 aPosition;
layout(location=1) in vec3 aNormal;

smooth out vec3 vNormalW;

void main()
{
	vNormalW =  mat3(uWorldMatrix)*aNormal;
	gl_Position = uViewProjMatrix * (uWorldMatrix*vec4(aPosition, 1.0));
}
)";
		std::string teapotFragmentShader = R"(
#version 330
smooth in vec3 vNormalW;

layout(location=0) out vec4 fResult;

void main()
{
	vec3 nrm = normalize(vNormalW);
	vec3 ldir = normalize(vec3(1.0));
	float ndotl = max(dot(nrm, ldir), 0.0) * 0.5;
	//fResult = vec3(ndotl);
    fResult=vec4(vec3(ndotl),1.0);
}
)";
		teapotShader = create_shader_program(teapotVertexShader, teapotFragmentShader, {});



		glGenBuffers(1, &VertexBuffer);;
		glGenVertexArrays(1, &VertexArray);
		glBindVertexArray(VertexArray);
		glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(VertexData), (GLvoid*)offsetof(VertexData, m_positionSize));
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(VertexData), (GLvoid*)offsetof(VertexData, m_color));
		glBindVertexArray(0);

		//ResetId();
		m_sortCalled = false;
		m_endFrameCalled = false;
		m_primMode = PrimitiveMode_None;
		m_vertexDataIndex = 0; // = sorting disabled
		m_layerIndex = 0;
		m_firstVertThisPrim = 0;
		m_vertCountThisPrim = 0;

		//m_gizmoLocal = false;
		//m_gizmoMode = GizmoMode_Translation;GizmoMode_Rotation
		m_gizmoLocal = true;
		m_gizmoMode = GizmoMode_Rotation;
		m_hotId = Id_Invalid;
		m_activeId = Id_Invalid;
		m_appId = Id_Invalid;
		m_appActiveId = Id_Invalid;
		m_appHotId = Id_Invalid;
		m_hotDepth = FLT_MAX;
		gizmoHeightPixels = 64.0f;
		gizmoSizePixels = 5.0f;

		memset(&m_keyDownCurr, 0, sizeof(m_keyDownCurr));
		memset(&m_keyDownPrev, 0, sizeof(m_keyDownPrev));
		matrixStack.push_back(Eigen::Matrix4f::Identity());
		colorStack.push_back(Eigen::Vector4<uint8_t>(255, 255, 255, 255));
		alphaStack.push_back(1.0f);
		sizeStack.push_back(1.0f);
		pushEnableSorting(false);
		pushLayerId(0);
		pushId(0x811C9DC5u); // fnv1 hash base

	}
	void Guizmo::begin(PrimitiveMode _mode)
	{
		assert(!m_endFrameCalled); // Begin*() called after EndFrame() but before NewFrame(), or forgot to call NewFrame()
		assert(m_primMode == PrimitiveMode_None); // forgot to call End()
		m_primMode = _mode;
		m_vertCountThisPrim = 0;
		switch (m_primMode)
		{
		case PrimitiveMode_Points:
			m_primType = DrawPrimitive_Points;
			break;
		case PrimitiveMode_Lines:
		case PrimitiveMode_LineStrip:
		case PrimitiveMode_LineLoop:
			m_primType = DrawPrimitive_Lines;
			break;
		case PrimitiveMode_Triangles:
		case PrimitiveMode_TriangleStrip:
			m_primType = DrawPrimitive_Triangles;
			break;
		default:
			break;
		};
		m_firstVertThisPrim = getCurrentVertexList()->size();
	}
	void Guizmo::end()
	{
		assert(m_primMode != PrimitiveMode_None); // End() called without Begin*()
		if (m_vertCountThisPrim > 0)
		{
			VertexList* vertexList = getCurrentVertexList();
			switch (m_primMode)
			{
			case PrimitiveMode_Points:
				break;
			case PrimitiveMode_Lines:
				assert(m_vertCountThisPrim % 2 == 0);
				break;
			case PrimitiveMode_LineStrip:
				assert(m_vertCountThisPrim > 1);
				break;
			case PrimitiveMode_LineLoop:
				assert(m_vertCountThisPrim > 1);
				vertexList->push_back(vertexList->back());
				vertexList->push_back((*vertexList)[m_firstVertThisPrim]);
				break;
			case PrimitiveMode_Triangles:
				assert(m_vertCountThisPrim % 3 == 0);
				break;
			case PrimitiveMode_TriangleStrip:
				assert(m_vertCountThisPrim >= 3);
				break;
			default:
				break;
			};

		}
		m_primMode = PrimitiveMode_None;
		m_primType = DrawPrimitive_Count;

	}
	void Guizmo::vertex(const Eigen::Vector3<float>& _position, float _size, Eigen::Vector4<uint8_t> _color)
	{
		assert(m_primMode != PrimitiveMode_None); // Vertex() called without Begin*()

		VertexData vd(_position, _size, _color);

		if (matrixStack.size() > 1) // optim, skip the matrix multiplication when the stack size is 1
		{
			Eigen::Vector3<float> pos = MatrixMulPoint(matrixStack.back(), _position);

			vd.m_positionSize = Eigen::Vector4<float>(pos.x(), pos.y(), pos.z(), _size);
		}
		vd.m_color(0) = vd.m_color(0) * alphaStack.back();



		VertexList* vertexList = getCurrentVertexList();
		switch (m_primMode)
		{
		case PrimitiveMode_Points:
		case PrimitiveMode_Lines:
		case PrimitiveMode_Triangles:
			vertexList->push_back(vd);
			break;
		case PrimitiveMode_LineStrip:
		case PrimitiveMode_LineLoop:
			if (m_vertCountThisPrim >= 2)
			{
				vertexList->push_back(vertexList->back());
				++m_vertCountThisPrim;
			}
			vertexList->push_back(vd);
			break;
		case PrimitiveMode_TriangleStrip:
			if (m_vertCountThisPrim >= 3)
			{
				vertexList->push_back(*(vertexList->end() - 2));
				vertexList->push_back(*(vertexList->end() - 2));
				m_vertCountThisPrim += 2;
			}
			vertexList->push_back(vd);
			break;
		default:
			break;
		};
		++m_vertCountThisPrim;
	}
	void Guizmo::Draw(Eigen::Matrix4f& model)
	{


		Eigen::Vector3<float> position = Eigen::Vector3<float>(model(0, 3), model(1, 3), model(2, 3));
		Eigen::Vector3<float>* outVec3 = new Eigen::Vector3<float>(position);
		float d = cameraParam.orthProj ? 1.0f : (position - cameraParam.eye).norm();
		float worldHeight = cameraParam.projectY * d * (gizmoHeightPixels / cameraParam.viewportHeight);
		float worldSize = cameraParam.projectY * d * (gizmoSizePixels / cameraParam.viewportHeight);

		float planeSize = worldHeight * (0.5f * 0.5f);
		float planeOffset = worldHeight * 0.5f;

		struct AxisG { unsigned int m_id; Eigen::Vector3<float> m_axis; Eigen::Vector4<uint8_t> m_color; };
		AxisG axes[] =
		{
			{ MakeId("axisX"), Eigen::Vector3<float>(1.0f, 0.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,0,255)},
			{  MakeId("axisY"), Eigen::Vector3<float>(0.0f, 1.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,255,0)},
			{ MakeId("axisZ"),Eigen::Vector3<float>(0.0f, 0.0f, 1.0f), Eigen::Vector4<uint8_t>(255,255,0,0)}
		};
		struct PlaneG { unsigned int m_id; Eigen::Vector3<float>m_origin; };

		PlaneG planes[] =
		{
			{ MakeId("planeYZ"),  Eigen::Vector3<float>(0.0f, planeOffset, planeOffset) },
			{ MakeId("planeXZ"),  Eigen::Vector3<float>(planeOffset, 0.0f, planeOffset) },
			{ MakeId("planeXY"),  Eigen::Vector3<float>(planeOffset, planeOffset, 0.0f) },
			{ MakeId("planeV"),   Eigen::Vector3<float>(0.0f, 0.0f, 0.0f) }
		};

		Sphere boundingSphere(position, worldHeight * 1.5f); // expand the bs to catch the planar subgizmos
		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);

		matrixStack.push_back(Eigen::Matrix4f::Identity());
		colorStack.push_back(Eigen::Vector4<uint8_t>(255, 0, 255, 255));
		//DrawSphereFilled(boundingSphere.m_origin, boundingSphere.m_radius,40);
		colorStack.pop_back();
		colorStack.push_back(Eigen::Vector4<uint8_t>(255, 0, 0, 255));
		//DrawSphereFilled(cameraParam.rayOrigin+ cameraParam.rayDirection, 0.1, 40);
		colorStack.pop_back();
		matrixStack.pop_back();

		bool intersects = Intersects(ray, boundingSphere);
		if (intersects) {
			//printf("position(%f,%f,%f),o(%f,%f,%f),d(%f,%f,%f)\n", position(0), position(1), position(2),
			//	cameraParam.rayOrigin(0), cameraParam.rayOrigin(1), cameraParam.rayOrigin(2),
			//	cameraParam.rayDirection(0), cameraParam.rayDirection(1), cameraParam.rayDirection(2)
			//);
		}


		matrixStack.push_back(model);
		// local planes need to be drawn with the pushed matrix for correct orientation
		for (int i = 0; i < 3; ++i)
		{
			const PlaneG& plane = planes[i];
			Eigen::Vector3<float> viewDir = cameraParam.orthProj
				? cameraParam.viewDirectioin
				: (cameraParam.eye - plane.m_origin).normalized();
			//Vec3 n = Mat3(m_matrixStack.back()) * _normal;
			//ctx.gizmoPlaneTranslation_Draw(plane.m_id, plane.m_origin, axes[i].m_axis, planeSize, Color_GizmoHighlight);
			colorStack.push_back(Eigen::Vector4<uint8_t>(255, 255, 255, 255));
			DrawQuadFilled(plane.m_origin, axes[i].m_axis, Eigen::Vector2<float>(planeSize, planeSize));
			colorStack.pop_back();
			//axes[i].m_axis = Mat3(ctx.getMatrix()) * axes[i].m_axis;


			if (intersects)
			{
				//ret |= ctx.gizmoPlaneTranslation_Behavior(plane.m_id, ctx.getMatrix() * plane.m_origin, axes[i].m_axis, appData.m_snapTranslation, planeSize, outVec3);
			}
		}


		matrixStack.push_back(Eigen::Matrix4f::Identity());

		for (int i = 0; i < 3; ++i)
		{
			AxisG& axis = axes[i];
			sizeStack.push_back(5.0f);
			colorStack.push_back(axis.m_color);
			DrawArrow(
				position + axis.m_axis * (0.2f * worldHeight),
				position + axis.m_axis * worldHeight
			);
			sizeStack.pop_back();
			colorStack.pop_back();
			//ctx.gizmoAxisTranslation_Draw(axis.m_id, drawAt, axis.m_axis, worldHeight, worldSize, axis.m_color);
			if (intersects)
			{
				//printf("hit\n");
				gizmoAxisTranslation_Behavior(axis.m_id, position, axis.m_axis, cameraParam.m_snapTranslation, worldHeight, worldSize, outVec3);
			}
		}

		// axes

		matrixStack.pop_back();
		matrixStack.pop_back();
		model(0, 3) = outVec3->x();
		model(1, 3) = outVec3->y();
		model(2, 3) = outVec3->z();
		//printf("(%f,%f,%f)\n", outVec3->x(), outVec3->y(), outVec3->z());
	}

	void Guizmo::DrawQuadFilled(const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _normal, const Eigen::Vector2<float>& _size)
	{
		Eigen::Matrix4f matrix = matrixStack.back() * LookAt(_origin, _origin + _normal);
		matrixStack.push_back(matrix);
		DrawQuadFilled(
			Eigen::Vector3<float>(-_size.x(), -_size.y(), 0.0f),
			Eigen::Vector3<float>(_size.x(), -_size.y(), 0.0f),
			Eigen::Vector3<float>(_size.x(), _size.y(), 0.0f),
			Eigen::Vector3<float>(-_size.x(), _size.y(), 0.0f));
		matrixStack.pop_back();


	}

	void Guizmo::DrawQuad(const Eigen::Vector3<float>& _a, const Eigen::Vector3<float>& _b, const Eigen::Vector3<float>& _c, const Eigen::Vector3<float>& _d)
	{
		begin(PrimitiveMode_LineLoop);
		vertex(_a);
		vertex(_b);
		vertex(_c);
		vertex(_d);
		end();
	}

	void Guizmo::DrawQuad(const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _normal, const Eigen::Vector2<float>& _size)
	{
		matrixStack.push_back(matrixStack.back() * LookAt(_origin, _origin + _normal));
		DrawQuad(
			Eigen::Vector3<float>(-_size.x(), _size.y(), 0.0f),
			Eigen::Vector3<float>(_size.x(), _size.y(), 0.0f),
			Eigen::Vector3<float>(_size.x(), -_size.y(), 0.0f),
			Eigen::Vector3<float>(-_size.x(), -_size.y(), 0.0f)
		);
		matrixStack.pop_back();
	}


	void Guizmo::DrawTeapot(const Eigen::Matrix4f& model, const Eigen::Matrix4f& viewProj)
	{
		static GLuint vbTeapot;
		static GLuint ibTeapot;
		static GLuint vaTeapot;
		if (vaTeapot == 0)
		{

			glGenBuffers(1, &vbTeapot);
			glGenBuffers(1, &ibTeapot);
			glGenVertexArrays(1, &vaTeapot);
			glBindVertexArray(vaTeapot);
			glBindBuffer(GL_ARRAY_BUFFER, vbTeapot);
			glEnableVertexAttribArray(0);
			glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 6, (GLvoid*)0);
			glEnableVertexAttribArray(1);
			glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 6, (GLvoid*)(sizeof(float) * 3));

			glBufferData(GL_ARRAY_BUFFER, sizeof(s_teapotVertices), (GLvoid*)s_teapotVertices, GL_STATIC_DRAW);
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibTeapot);
			glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(s_teapotIndices), (GLvoid*)s_teapotIndices, GL_STATIC_DRAW);
			glBindVertexArray(0);
		}

		glUseProgram(teapotShader);
		glUniformMatrix4fv(glGetUniformLocation(teapotShader, "uWorldMatrix"), 1, false, model.data());
		glUniformMatrix4fv(glGetUniformLocation(teapotShader, "uViewProjMatrix"), 1, false, viewProj.data());
		glBindVertexArray(vaTeapot);
		glEnable(GL_DEPTH_TEST);
		//glEnable(GL_CULL_FACE);
		//glDisable(GL_DEPTH_TEST);
		glDrawElements(GL_TRIANGLES, sizeof(s_teapotIndices) / sizeof(unsigned), GL_UNSIGNED_INT, (GLvoid*)0);

		//glDisable(GL_CULL_FACE);
		glBindVertexArray(0);
		glUseProgram(0);
	}
	void Guizmo::DrawQuadFilled(const Eigen::Vector3<float>& _a, const Eigen::Vector3<float>& _b, const Eigen::Vector3<float>& _c, const Eigen::Vector3<float>& _d)
	{
		/*
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _a), 1.0, colorStack.back()));
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _b), 1.0, colorStack.back()));
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _c), 1.0, colorStack.back()));
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _a), 1.0, colorStack.back()));
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _c), 1.0, colorStack.back()));
		triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _d), 1.0, colorStack.back()));

		*/
		begin(PrimitiveMode_Triangles);
		vertex(_a);
		vertex(_b);
		vertex(_c);
		vertex(_a);
		vertex(_c);
		vertex(_d);
		end();

	}
	void Guizmo::DrawArrow(const Eigen::Vector3<float>& _start, const Eigen::Vector3<float>& _end, float _headLength, float _headThickness)
	{

		if (_headThickness < 0.0f)
		{
			_headThickness = sizeStack.back() * 2.0f;
		}
		Eigen::Vector3<float> dir = _end - _start;
		float dirlen = dir.norm();
		if (_headLength < 0.0f)
		{
			_headLength = std::min(dirlen / 2.0f, pixelsToWorldSize(_end, _headThickness * 2.0f));
		}
		dir = dir / dirlen;

		Eigen::Vector3<float> head = _end - dir * _headLength;
		/*
		lineVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _start), sizeStack.back(), colorStack.back()));
		lineVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), head), sizeStack.back(), colorStack.back()));
		lineVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), head), _headThickness, colorStack.back()));
		lineVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), _end), 2.0f, colorStack.back()));

		*/
		begin(PrimitiveMode_Lines);
		vertex(_start);
		vertex(head);
		vertex(head, _headThickness, colorStack.back());
		vertex(_end, 2.0f, colorStack.back()); // \hack \todo 2.0f here compensates for the shader antialiasing (which reduces alpha when size < 2)
		end();



	}

	void Guizmo::DrawSphereFilled(const Eigen::Vector3<float>& _origin, float _radius, int _detail)
	{
		if (_detail < 0) {
			return;
		}
		_detail = std::max(_detail, 6);
		float yp = -_radius;
		float rp = 0.0f;
		for (int i = 1; i <= _detail / 2; ++i)
		{
			float y = ((float)i / (float)(_detail / 2)) * 2.0f - 1.0f;
			float r = cosf(y * HalfPi) * _radius;
			y = sinf(y * HalfPi) * _radius;

			float xp = 1.0f;
			float zp = 0.0f;
			for (int j = 1; j <= _detail; ++j)
			{
				float x = ((float)j / (float)(_detail)) * TwoPi;
				float z = sinf(x);
				x = cosf(x);
				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(xp * rp + _origin.x(), yp + _origin.y(), zp * rp + _origin.z())), 1.0, colorStack.back()));
				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(xp * r + _origin.x(), y + _origin.y(), zp * r + _origin.z())), 1.0, colorStack.back()));
				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(x * r + _origin.x(), y + _origin.y(), z * r + _origin.z())), 1.0, colorStack.back()));

				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(xp * rp + _origin.x(), yp + _origin.y(), zp * rp + _origin.z())), 1.0, colorStack.back()));
				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(x * r + _origin.x(), y + _origin.y(), z * r + _origin.z())), 1.0, colorStack.back()));
				triangleVertexData.push_back(VertexData(MatrixMulPoint(matrixStack.back(), Eigen::Vector3<float>(x * rp + _origin.x(), yp + _origin.y(), z * rp + _origin.z())), 1.0, colorStack.back()));



				xp = x;
				zp = z;
			}

			yp = y;
			rp = r;
		}
	}

	bool Guizmo::DrawManpulate(unsigned _id, Eigen::Matrix4f& model)
	{
		matrixStack.push_back(model);
		bool ret = false;
		Eigen::Vector3<float> position = Eigen::Vector3<float>(model(0, 3), model(1, 3), model(2, 3));
		Eigen::Matrix3f rotation = model.block(0, 0, 3, 3);
		switch (m_gizmoMode)
		{
		case GizmoMode_Translation:

			if (Translation(_id, position, m_gizmoLocal)) {
				model.block(0, 3, 3, 1) = position;
				ret = true;
			}
			break;
		case GizmoMode_Rotation: {


			if (Rotation(_id, rotation, m_gizmoLocal)) {
				model.block(0, 0, 3, 3) = rotation;
				ret = true;
			}
			break;
		}

		case GizmoMode_Scale:
			break;
		default:
			break;
		}
		matrixStack.pop_back();
		return ret;
	}

	bool Guizmo::DrawManpulate(const char* _id, Eigen::Matrix4f& model)
	{
		return DrawManpulate(MakeId(_id), model);
	}

	bool Guizmo::Translation(unsigned int _id, Eigen::Vector3<float>& _translation_, bool _local)
	{
		bool ret = false;
		Eigen::Vector3<float>* outVec3 = new Eigen::Vector3<float>(_translation_.x(), _translation_.y(), _translation_.z());
		Eigen::Vector3<float>drawAt = *outVec3;

		float worldHeight = pixelsToWorldSize(drawAt, gizmoHeightPixels);
		pushId(_id);
		m_appId = _id;
		if (_local)
		{
			Eigen::Matrix4f localMatrix = matrixStack.back();
			//localMatrix(0, 0) = 1.0f;
			//localMatrix(1, 1) = 1.0f;
			//localMatrix(2, 2) = 1.0f;
			matrixStack.push_back(localMatrix);
		}
		float planeSize = worldHeight * (0.5f * 0.5f);
		float planeOffset = worldHeight * 0.5f;
		float worldSize = pixelsToWorldSize(drawAt, gizmoSizePixels);

		struct AxisG { unsigned int m_id; Eigen::Vector3<float> m_axis; Eigen::Vector4<uint8_t> m_color; };
		AxisG axes[] =
		{
			{ MakeId("axisX"), Eigen::Vector3<float>(1.0f, 0.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,0,255)},
			{ MakeId("axisY"), Eigen::Vector3<float>(0.0f, 1.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,255,0)},
			{ MakeId("axisZ"), Eigen::Vector3<float>(0.0f, 0.0f, 1.0f), Eigen::Vector4<uint8_t>(255,255,0,0)}
		};
		struct PlaneG { unsigned int m_id; Eigen::Vector3<float> m_origin; };

		PlaneG planes[] =
		{
			{ MakeId("planeYZ"), Eigen::Vector3<float>(0.0f, planeOffset, planeOffset) },
			{ MakeId("planeXZ"), Eigen::Vector3<float>(planeOffset, 0.0f, planeOffset) },
			{ MakeId("planeXY"), Eigen::Vector3<float>(planeOffset, planeOffset, 0.0f) },
			{ MakeId("planeV"),  Eigen::Vector3<float>(0.0f, 0.0f, 0.0f) }
		};

		if (cameraParam.m_flipGizmoWhenBehind)
		{
			const Eigen::Vector3<float> viewDir = cameraParam.orthProj
				? -cameraParam.viewDirectioin
				: (cameraParam.eye - *outVec3).normalized();

			for (int i = 0; i < 3; ++i)
			{
				const Eigen::Vector3<float> axis = _local ? Eigen::Vector3<float>(matrixStack.back().block(0, i, 3, 1)) : axes[i].m_axis;
				if (axis.dot(viewDir) < 0.0f)
				{
					axes[i].m_axis = -axes[i].m_axis;
					for (int j = 0; j < 3; ++j)
					{
						planes[j].m_origin[i] = -planes[j].m_origin[i];
					}
				}
			}
		}
		Sphere boundingSphere(*outVec3, worldHeight * 1.5f); // expand the bs to catch the planar subgizmos
		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
		bool intersects = m_appHotId == m_appId || Intersects(ray, boundingSphere);
		//pushEnableSorting(true);

		if (_local)
		{
			// local planes need to be drawn with the pushed matrix for correct orientation
			for (int i = 0; i < 3; ++i)
			{
				const PlaneG& plane = planes[i];
				gizmoPlaneTranslation_Draw(plane.m_id, plane.m_origin, axes[i].m_axis, planeSize, Color_Gold);
				axes[i].m_axis = matrixStack.back().block(0, 0, 3, 3) * axes[i].m_axis;
				if (intersects)
				{
					ret |= gizmoPlaneTranslation_Behavior(plane.m_id, MatrixMulPoint(matrixStack.back(), plane.m_origin), axes[i].m_axis, cameraParam.m_snapTranslation, planeSize, outVec3);
				}
			}
		}
		else
		{
			matrixStack.push_back(Eigen::Matrix4f::Identity());
			for (int i = 0; i < 3; ++i)
			{
				const PlaneG& plane = planes[i];
				gizmoPlaneTranslation_Draw(plane.m_id, drawAt + plane.m_origin, axes[i].m_axis, planeSize, Color_Gold);
				if (intersects)
				{
					ret |= gizmoPlaneTranslation_Behavior(plane.m_id, drawAt + plane.m_origin, axes[i].m_axis, cameraParam.m_snapTranslation, planeSize, outVec3);
				}
			}
			matrixStack.pop_back();
		}
		matrixStack.push_back(Eigen::Matrix4f::Identity());

		if (intersects)
		{
			// view plane (store the normal when the gizmo becomes active)
			unsigned int currentId = m_activeId;
			Eigen::Vector3<float> storedViewNormal = m_gizmoStateMat3.col(0);
			Eigen::Vector3<float> viewNormal;
			if (planes[3].m_id == m_activeId)
			{
				viewNormal = storedViewNormal;
			}
			else
			{
				viewNormal = cameraParam.viewDirectioin;
			}
			ret |= gizmoPlaneTranslation_Behavior(planes[3].m_id, drawAt, viewNormal, cameraParam.m_snapTranslation, worldSize, outVec3);
			if (currentId != m_activeId)
			{
				// gizmo became active, store the view normal
				storedViewNormal = viewNormal;
				m_gizmoStateMat3.block(0, 0, 3, 1) = storedViewNormal;
			}

			// highlight axes if the corresponding plane is hot
			if (planes[0].m_id == m_hotId) // YZ
			{
				axes[1].m_color = axes[2].m_color = Color_Gold;
			}
			else if (planes[1].m_id == m_hotId) // XZ
			{
				axes[0].m_color = axes[2].m_color = Color_Gold;
			}
			else if (planes[2].m_id == m_hotId) // XY
			{
				axes[0].m_color = axes[1].m_color = Color_Gold;
			}
			else if (planes[3].m_id == m_hotId) // view plane
			{
				axes[0].m_color = axes[1].m_color = axes[2].m_color = Color_Gold;
			}
		}



		// draw the view plane handle
		begin(PrimitiveMode_Points);
		vertex(drawAt, gizmoSizePixels * 2.0f, planes[3].m_id == m_hotId ? Color_Gold : Eigen::Vector4<uint8_t>(255, 255, 255, 255));
		end();
		// axes
		for (int i = 0; i < 3; ++i)
		{
			AxisG& axis = axes[i];
			gizmoAxisTranslation_Draw(axis.m_id, drawAt, axis.m_axis, worldHeight, worldSize, axis.m_color);
			if (intersects)
			{

				ret |= gizmoAxisTranslation_Behavior(axis.m_id, drawAt, axis.m_axis, cameraParam.m_snapTranslation, worldHeight, worldSize, outVec3);
			}
		}
		matrixStack.pop_back();
		//popEnableSorting();

		if (_local)
		{
			matrixStack.pop_back();
		}

		popId();
		_translation_ = *outVec3;
		return ret;
	}

	bool Guizmo::gizmoPlaneTranslation_Behavior(const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _normal, float _snap, float _worldSize, Eigen::Vector3<float>* _out_)
	{
		//To Do;

		return false;
	}

	void Guizmo::gizmoAxisTranslation_Draw(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _axis, float _worldHeight, float _worldSize, Eigen::Vector4<uint8_t> _color)
	{
		Eigen::Vector3<float> viewDir = cameraParam.orthProj
			? cameraParam.viewDirectioin
			: (cameraParam.eye - _origin).normalized();
		;
		float aligned = 1.0f - fabs(_axis.dot(viewDir));
		aligned = Remap(aligned, 0.05f, 0.1f);
		Eigen::Vector4<uint8_t> color = _color;
		if (_id == m_activeId)
		{
			color = Color_Gold;
			pushEnableSorting(false);
			begin(PrimitiveMode_Lines);
			vertex(_origin - _axis * 999.0f, gizmoSizePixels * 0.5f, _color);
			vertex(_origin + _axis * 999.0f, gizmoSizePixels * 0.5f, _color);

			end();
			popEnableSorting();
		}
		else if (_id == m_hotId)
		{
			color = Color_Gold;
			aligned = 1.0f;
		}
		color(0) = color(0) * aligned;// .setA(color.getA() * aligned);
		colorStack.push_back(color);
		sizeStack.push_back(gizmoSizePixels);

		DrawArrow(
			_origin + _axis * (0.2f * _worldHeight),
			_origin + _axis * _worldHeight
		);
		sizeStack.pop_back();
		colorStack.pop_back();
	}

	bool Guizmo::gizmoAxisTranslation_Behavior(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _axis, float _snap, float _worldHeight, float _worldSize, Eigen::Vector3<float>* _out_)
	{

		if (_id != m_hotId)
		{
			// disable behavior when aligned
			Eigen::Vector3<float> viewDir = cameraParam.orthProj
				? cameraParam.viewDirectioin
				: (cameraParam.eye - _origin).normalized()
				;
			float aligned = 1.0f - fabs(_axis.dot(viewDir));
			if (aligned < 0.01f)
			{
				return false;
			}
		}



		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
		Line axisLine(_origin, _axis);
		Capsule axisCapsule(_origin + _axis * (0.2f * _worldHeight), _origin + _axis * _worldHeight, _worldSize);
		//printf("start(%f,%f,%f) end(%f,%f,%f) radius %f\n",axisCapsule.m_start.x(), axisCapsule.m_start.y(), axisCapsule.m_start.z(),
		//	axisCapsule.m_end.x(), axisCapsule.m_end.y(), axisCapsule.m_end.z(),axisCapsule.m_radius
		//	);
		//printf("origin(%f,%f,%f) direction(%f,%f,%f)\n", cameraParam.rayOrigin.x(), cameraParam.rayOrigin.y(), cameraParam.rayOrigin.z(),
		//	cameraParam.rayDirection.x(), cameraParam.rayDirection.y(), cameraParam.rayDirection.z()
		//	);
		Eigen::Vector3<float>& storedPosition = m_gizmoStateVec3;

		if (_id == m_activeId)
		{
			if (isKeyDown(Action_Select))
			{
				float tr, tl;
				Nearest(ray, axisLine, tr, tl);

				*_out_ = Snap(*_out_ + _axis * tl - storedPosition, _snap);


				return true;
			}
			else
			{
				MakeActive(Id_Invalid);
			}
		}
		else if (_id == m_hotId)
		{
			if (Intersects(ray, axisCapsule))
			{
				if (isKeyDown(Action_Select))
				{
					MakeActive(_id);
					float tr, tl;
					Nearest(ray, axisLine, tr, tl);
					storedPosition = _axis * tl;
				}
			}
			else
			{
				ResetId();
			}
		}
		else
		{
			float t0, t1;
			bool intersects = Intersect(ray, axisCapsule, t0, t1);
			if (MakeHot(_id, t0, intersects)) {
				printf("hit Cap\n");
			}
		}

		return false;
	}

	void Guizmo::gizmoPlaneTranslation_Draw(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _normal, float _worldSize, Eigen::Vector4<uint8_t> _color)
	{
		Eigen::Vector3<float> viewDir = cameraParam.orthProj
			? cameraParam.viewDirectioin
			: (cameraParam.eye - _origin).normalized()
			;

		Eigen::Vector3<float> n = matrixStack.back().block(0, 0, 3, 3) * _normal; // _normal may be in local space, need to transform to world space for the dot with viewDir to make sense
		float aligned = fabs(n.dot(viewDir));
		aligned = Remap(aligned, 0.1f, 0.2f);
		Eigen::Vector4<uint8_t> color = _color;
		color(0) = (color(0) * aligned);
		colorStack.push_back(color);
		alphaStack.push_back(_id == m_hotId ? 0.7f : 0.1f * alphaStack.back());

		DrawQuadFilled(_origin, _normal, Eigen::Vector2<float>(_worldSize, _worldSize));
		alphaStack.pop_back();
		DrawQuad(_origin, _normal, Eigen::Vector2<float>(_worldSize, _worldSize));
		colorStack.pop_back();
	}

	bool Guizmo::gizmoPlaneTranslation_Behavior(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _normal, float _snap, float _worldSize, Eigen::Vector3<float>* _out_)
	{
		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
		Plane plane(_normal, _origin);

		float tr;
		bool intersects = Intersect(ray, plane, tr);
		if (!intersects)
		{
			return false;
		}
		Eigen::Vector3<float> intersection = ray.m_origin + ray.m_direction * tr;
		Eigen::Vector3<float> Abs = Eigen::Vector3<float>(abs(intersection.x() - _origin.x()), abs(intersection.y() - _origin.y()), abs(intersection.z() - _origin.z()));
		bool allLessFlag = Abs.x() < _worldSize && Abs.y() < _worldSize && Abs.z() < _worldSize;
		intersects &= allLessFlag;// AllLess(Abs(intersection - _origin), Eigen::Vector3<float>(_worldSize));

		Eigen::Vector3<float>& storedPosition = m_gizmoStateVec3;

		if (_id == m_activeId)
		{
			if (isKeyDown(Action_Select))
			{

				*_out_ = Snap(intersection + storedPosition, plane, _snap);
				return true;
			}
			else
			{
				MakeActive(Id_Invalid);
			}
		}
		else if (_id == m_hotId)
		{
			if (intersects)
			{
				if (isKeyDown(Action_Select))
				{
					MakeActive(_id);
					storedPosition = *_out_ - intersection;
				}
			}
			else
			{
				ResetId();
			}
		}
		else
		{
			MakeHot(_id, tr, intersects);
		}

		return false;
	}

	bool Guizmo::Rotation(unsigned int _id, Eigen::Matrix3f& _rotation_, bool _local)
	{
		Eigen::Vector3<float> origin = matrixStack.back().block(0, 3, 3, 1);
		float worldRadius = pixelsToWorldSize(origin, gizmoHeightPixels);
		unsigned int currentId = m_activeId; // store currentId to detect if the gizmo becomes active during this call
		pushId(_id);
		m_appId = _id;

		bool ret = false;
		Eigen::Matrix3f& storedRotation = m_gizmoStateMat3;
		Eigen::Matrix3f* outMat3 = new Eigen::Matrix3f(_rotation_);
		Eigen::Vector3<float> euler = ToEulerXYZ(*outMat3);
		float worldSize = pixelsToWorldSize(origin, gizmoSizePixels);

		struct AxisG { unsigned int m_id; Eigen::Vector3<float> m_axis; Eigen::Vector4<uint8_t> m_color; };
		AxisG axes[] =
		{
			{ MakeId("axisX"), Eigen::Vector3<float>(1.0f, 0.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,0,255)},
			{ MakeId("axisY"), Eigen::Vector3<float>(0.0f, 1.0f, 0.0f), Eigen::Vector4<uint8_t>(255,0,255,0) },
			{ MakeId("axisZ"), Eigen::Vector3<float>(0.0f, 0.0f, 1.0f),Eigen::Vector4<uint8_t>(255,255,0,0)  }
		};
		unsigned int viewId = MakeId("axisV");

		Sphere boundingSphere(origin, worldRadius);
		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
		bool intersects = m_appHotId == m_appId || Intersects(ray, boundingSphere);

		//const AppData& appData = ctx.getAppData();
		if (_local)
		{
			// extract axes from the pushed matrix
			for (int i = 0; i < 3; ++i)
			{
				if (m_activeId == axes[i].m_id)
				{
					// use the stored matrix where the id is active, avoid rotating the axis frame during interaction (cause numerical instability)
					axes[i].m_axis = storedRotation.col(i).normalized();// Normalize(Vec3(storedRotation.getCol(i)));
				}
				else
				{
					//matrixStack.back().col(i).normalized();
					axes[i].m_axis = matrixStack.back().block(0, i, 3, 1).normalized();
				}
			}
		}

		matrixStack.push_back(Eigen::Matrix4f::Identity());
		//ctx.pushMatrix(Mat4(1.0f));
		for (int i = 0; i < 3; ++i)
		{
			if (i == 0 && (m_activeId == axes[1].m_id || m_activeId == axes[2].m_id || m_activeId == viewId))
			{
				continue;
			}
			if (i == 1 && (m_activeId == axes[2].m_id || m_activeId == axes[0].m_id || m_activeId == viewId))
			{
				continue;
			}
			if (i == 2 && (m_activeId == axes[0].m_id || m_activeId == axes[1].m_id || m_activeId == viewId))
			{
				continue;
			}

			AxisG& axis = axes[i];
			gizmoAxislAngle_Draw(axis.m_id, origin, axis.m_axis, worldRadius * 0.9f, euler[i], axis.m_color, 0.0f);
			if (intersects && gizmoAxislAngle_Behavior(axis.m_id, origin, axis.m_axis, cameraParam.m_snapRotation, worldRadius * 0.9f, worldSize, &euler[i]))
			{
				*outMat3 = RotationMatrix(axis.m_axis, euler[i] - gizmoStateFloat) * storedRotation;
				ret = true;
			}
		}
		if (!(m_activeId == axes[0].m_id || m_activeId == axes[1].m_id || m_activeId == axes[2].m_id))
		{
			Eigen::Vector3<float> viewNormal = cameraParam.viewDirectioin;
			float angle = 0.0f;
			if (intersects && gizmoAxislAngle_Behavior(viewId, origin, viewNormal, cameraParam.m_snapRotation, worldRadius, worldSize, &angle))
			{
				*outMat3 = RotationMatrix(viewNormal, angle) * storedRotation;
				ret = true;
			}
			gizmoAxislAngle_Draw(viewId, origin, viewNormal, worldRadius, angle, viewId == m_activeId ? Color_Gold : Eigen::Vector4<uint8_t>(255, 255, 255, 255), 1.0f);
		}
		matrixStack.pop_back();


		if (currentId != m_activeId)
		{
			// gizmo became active, store rotation matrix
			storedRotation = *outMat3;
		}
		idStack.pop_back();
		_rotation_ = *outMat3;

		return ret;
	}

	bool Guizmo::gizmoAxislAngle_Behavior(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _axis, float _snap, float _worldRadius, float _worldSize, float* _out_)
	{
		Eigen::Vector3<float> viewDir = cameraParam.orthProj
			? cameraParam.viewDirectioin
			: (cameraParam.eye - _origin).normalized();

		float aligned = fabs(_axis.dot(viewDir));
		float tr = 0.0f;
		Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
		bool intersects = false;
		Eigen::Vector3<float>intersection;
		if (aligned < 0.05f)
		{
			// ray-plane intersection fails at grazing angles, use capsule interesection
			float t1;
			Eigen::Vector3<float> capsuleAxis = viewDir.cross(_axis);
			Capsule capsule(_origin + capsuleAxis * _worldRadius, _origin - capsuleAxis * _worldRadius, _worldSize * 0.5f);
			intersects = Intersect(ray, capsule, tr, t1);
			intersection = ray.m_origin + ray.m_direction * tr;

		}
		else
		{
			Plane plane(_axis, _origin);
			intersects = Intersect(ray, plane, tr);
			intersection = ray.m_origin + ray.m_direction * tr;
			float dist = (intersection - _origin).norm();
			intersects &= fabs(dist - _worldRadius) < (_worldSize + _worldSize * (1.0f - aligned) * 2.0f);
		}

		Eigen::Vector3<float>& storedVec = m_gizmoStateVec3;
		float& storedAngle = gizmoStateFloat;
		bool ret = false;

		// use a view-aligned plane intersection to generate the rotation delta
		Plane viewPlane(viewDir, _origin);
		Intersect(ray, viewPlane, tr);
		intersection = ray.m_origin + ray.m_direction * tr;

		if (_id == m_activeId)
		{
			if (isKeyDown(Action_Select))
			{
				Eigen::Vector3<float>  delta = (intersection - _origin).normalized();
				float sign = storedVec.cross(delta).dot(_axis);
				float angle = acosf(Clamp(delta.dot(storedVec), -1.0f, 1.0f));

				*_out_ = Snap(storedAngle + copysignf(angle, sign), _snap);

				return true;
			}
			else
			{
				MakeActive(Id_Invalid);
			}

		}
		else if (_id == m_hotId)
		{
			if (intersects)
			{
				if (isKeyDown(Action_Select))
				{
					MakeActive(_id);
					storedVec = (intersection - _origin).normalized();
					storedAngle = Snap(*_out_, cameraParam.m_snapRotation);
				}
			}
			else
			{
				ResetId();
			}

		}
		else
		{
			MakeHot(_id, tr, intersects);
		}
		return false;
	}

	void Guizmo::gizmoAxislAngle_Draw(unsigned int _id, const Eigen::Vector3<float>& _origin, const Eigen::Vector3<float>& _axis, float _worldRadius, float _angle, Eigen::Vector4<uint8_t> _color, float _minAlpha)
	{
		Eigen::Vector3<float> viewDir = cameraParam.orthProj
			? cameraParam.viewDirectioin
			: (cameraParam.eye - _origin).normalized()
			;
		float aligned = fabs(_axis.dot(viewDir));

		Eigen::Vector3<float>& storedVec = m_gizmoStateVec3;
		Eigen::Vector4<uint8_t> color = _color;

		if (_id == m_activeId)
		{
			color = Color_Gold;
			Ray ray(cameraParam.rayOrigin, cameraParam.rayDirection);
			Plane plane(_axis, _origin);
			float tr;
			if (Intersect(ray, plane, tr))
			{
				Eigen::Vector3<float> intersection = ray.m_origin + ray.m_direction * tr;
				Eigen::Vector3<float> delta = (intersection - _origin).normalized();

				alphaStack.push_back(std::max(_minAlpha, Remap(aligned, 1.0f, 0.99f)));

				pushEnableSorting(false);
				begin(PrimitiveMode_Lines);
				vertex(_origin - _axis * 999.0f, gizmoSizePixels * 0.5f, _color);
				vertex(_origin + _axis * 999.0f, gizmoSizePixels * 0.5f, _color);
				//vertex(_origin, m_gizmoSizePixels * 0.5f, Color_GizmoHighlight);
				//vertex(_origin + storedVec * _worldRadius, m_gizmoSizePixels * 0.5f, Color_GizmoHighlight);
				end();
				popEnableSorting();
				alphaStack.pop_back();
				//popAlpha();
				colorStack.push_back(Color_Gold);
				//pushColor(Color_GizmoHighlight);
				sizeStack.push_back(gizmoSizePixels);
				//pushSize(m_gizmoSizePixels);
				DrawArrow(_origin, _origin + delta * _worldRadius);
				sizeStack.pop_back();
				colorStack.pop_back();

				begin(PrimitiveMode_Points);
				vertex(_origin, gizmoSizePixels * 2.0f, Color_Gold);
				end();
			}

		}
		else if (_id == m_hotId)
		{
			color = Color_Gold;
		}
		aligned = std::max(Remap(aligned, 0.9f, 1.0f), 0.1f);
		if (m_activeId == _id)
		{
			aligned = 1.0f;
		}
		colorStack.push_back(color);
		sizeStack.push_back(gizmoSizePixels);
		matrixStack.push_back(matrixStack.back() * LookAt(_origin, _origin + _axis));
		//pushMatrix(getMatrix() * LookAt(_origin, _origin + _axis, m_appData.m_worldUp));
		begin(PrimitiveMode_LineLoop);
		const int detail = estimateLevelOfDetail(_origin, _worldRadius, 32, 128);
		for (int i = 0; i < detail; ++i)
		{
			float rad = TwoPi * ((float)i / (float)detail);
			vertex(Eigen::Vector3<float>(cosf(rad) * _worldRadius, sinf(rad) * _worldRadius, 0.0f));

			// post-modify the alpha for parts of the ring occluded by the sphere
			VertexData& vd = getCurrentVertexList()->back();
			Eigen::Vector3<float> v = Eigen::Vector3<float>(vd.m_positionSize.x(), vd.m_positionSize.y(), vd.m_positionSize.z());
			float d = (_origin - v).normalized().dot(cameraParam.viewDirectioin);
			d = std::max(_minAlpha, std::max(Remap(d, 0.1f, 0.2f), aligned));
			vd.m_color(0) = vd.m_color(0) * d;
		}
		end();
		matrixStack.pop_back();
		sizeStack.pop_back();
		colorStack.pop_back();
	}

	int Guizmo::estimateLevelOfDetail(const Eigen::Vector3<float>& _position, float _worldSize, int _min, int _max)
	{
		if (cameraParam.orthProj)
		{
			return _max;
		}

		float d = (_position - cameraParam.eye).norm();
		float x = Clamp(2.0f * atanf(_worldSize / (2.0f * d)), 0.0f, 1.0f);
		float fmin = (float)_min;
		float fmax = (float)_max;

		return (int)(fmin + (fmax - fmin) * x);
	}

	CameraParam& Guizmo::getCameraParam()
	{
		return cameraParam;
	}

	void Guizmo::NewFrame()
	{
		// all state stacks should be default here, else there was a mismatched Push*()/Pop*()
		assert(colorStack.size() == 1);
		assert(alphaStack.size() == 1);
		assert(sizeStack.size() == 1);
		assert(enableSortingStack.size() == 1);
		assert(layerIdStack.size() == 1);
		assert(matrixStack.size() == 1);
		assert(idStack.size() == 1);

		assert(m_primMode == PrimitiveMode_None);
		m_primMode = PrimitiveMode_None;
		m_primType = DrawPrimitive_Count;

		assert(m_vertexData[0].size() == m_vertexData[1].size());
		for (int i = 0; i < m_vertexData[0].size(); ++i)
		{
			m_vertexData[0][i]->clear();
			m_vertexData[1][i]->clear();
		}
		m_drawLists.clear();
		m_sortCalled = false;
		m_endFrameCalled = false;

		// copy keydown array internally so that we can make a delta to detect key presses
		memcpy(m_keyDownPrev, m_keyDownCurr, Key_Count); // \todo avoid this copy, use an index
		memcpy(m_keyDownCurr, cameraParam.m_keyDown, Key_Count); // must copy in case m_keyDown is updated after reset (e.g. by an app callback)

		// update gizmo modes
		if (wasKeyPressed(Action_GizmoTranslation))
		{
			m_gizmoMode = GizmoMode_Translation;
			ResetId();
		}
		else if (wasKeyPressed(Action_GizmoRotation))
		{
			m_gizmoMode = GizmoMode_Rotation;
			ResetId();
		}
		else if (wasKeyPressed(Action_GizmoScale))
		{
			m_gizmoMode = GizmoMode_Scale;
			ResetId();
		}
		if (wasKeyPressed(Action_GizmoLocal))
		{
			m_gizmoLocal = !m_gizmoLocal;
			ResetId();
		}
	}

	void Guizmo::EndFrame()
	{
		assert(!m_endFrameCalled); // EndFrame() was called multiple times for this frame
		m_endFrameCalled = true;

		// draw unsorted primitives first
		for (int i = 0; i < m_vertexData[0].size(); ++i)
		{
			if (m_vertexData[0][i]->size() > 0)
			{
				m_drawLists.push_back(DrawList());
				DrawList& dl = m_drawLists.back();
				dl.m_layerId = m_layerIdMap[i / DrawPrimitive_Count];
				dl.m_primType = (DrawPrimitiveType)(i % DrawPrimitive_Count);
				dl.m_vertexData = m_vertexData[0][i]->data();
				dl.m_vertexCount = m_vertexData[0][i]->size();
			}
		}

		// draw sorted primitives second
		if (!m_sortCalled)
		{
			//sort();
		}




		glEnable(GL_BLEND);
		glBlendEquation(GL_FUNC_ADD);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glEnable(GL_PROGRAM_POINT_SIZE);
		glDisable(GL_DEPTH_TEST);
		glDisable(GL_CULL_FACE);

		glViewport(0, 0, cameraParam.viewportWidth, cameraParam.viewportHeight);

		for (int i = 0, n = getDrawListCount(); i < n; ++i)
		{
			const DrawList& drawList = getDrawLists()[i];

			if (drawList.m_layerId == MakeId("NamedLayer"))
			{
				// The application may group primitives into layers, which can be used to change the draw state (e.g. enable depth testing, use a different shader)
			}

			GLenum prim;
			GLuint sh;
			switch (drawList.m_primType)
			{
			case DrawPrimitive_Points:
				prim = GL_POINTS;
				sh = pointShader;
				glDisable(GL_CULL_FACE); // points are view-aligned
				break;
			case DrawPrimitive_Lines:
				prim = GL_LINES;
				sh = lineShader;
				glDisable(GL_CULL_FACE); // lines are view-aligned
				break;
			case DrawPrimitive_Triangles:
				prim = GL_TRIANGLES;
				sh = triangleShader;
				//glAssert(glEnable(GL_CULL_FACE)); // culling valid for triangles, but optional
				break;
			default:
				assert(false);
				return;
			};

			glBindVertexArray(VertexArray);
			glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
			glBufferData(GL_ARRAY_BUFFER, (GLsizeiptr)drawList.m_vertexCount * sizeof(VertexData), (GLvoid*)drawList.m_vertexData, GL_STREAM_DRAW);


			glUseProgram(sh);
			glUniform2f(glGetUniformLocation(sh, "uViewport"), cameraParam.viewportWidth, cameraParam.viewportHeight);
			glUniformMatrix4fv(glGetUniformLocation(sh, "uViewProjMatrix"), 1, false, cameraParam.viewProj.data());
			glDrawArrays(prim, 0, (GLsizei)drawList.m_vertexCount);
		}
	}

	void Guizmo::Submit()
	{

		glEnable(GL_BLEND);
		glBlendEquation(GL_FUNC_ADD);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glEnable(GL_PROGRAM_POINT_SIZE);
		glDisable(GL_DEPTH_TEST);
		glDisable(GL_CULL_FACE);

		glViewport(0, 0, cameraParam.viewportWidth, cameraParam.viewportHeight);


		glBindVertexArray(VertexArray);
		glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
		glBufferData(GL_ARRAY_BUFFER, (GLsizeiptr)triangleVertexData.size() * sizeof(VertexData), (GLvoid*)triangleVertexData.data(), GL_STREAM_DRAW);

		glUseProgram(triangleShader);
		glUniform2f(glGetUniformLocation(triangleShader, "uViewport"), cameraParam.viewportWidth, cameraParam.viewportHeight);
		glUniformMatrix4fv(glGetUniformLocation(triangleShader, "uViewProjMatrix"), 1, false, cameraParam.viewProj.data());
		glDrawArrays(GL_TRIANGLES, 0, (GLsizei)triangleVertexData.size());



		glDisable(GL_CULL_FACE);
		glBindVertexArray(VertexArray);
		glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
		glBufferData(GL_ARRAY_BUFFER, (GLsizeiptr)lineVertexData.size() * sizeof(VertexData), (GLvoid*)lineVertexData.data(), GL_STREAM_DRAW);

		//AppData& ad = GetAppData();
		glUseProgram(lineShader);
		glUniform2f(glGetUniformLocation(lineShader, "uViewport"), cameraParam.viewportWidth, cameraParam.viewportHeight);
		glUniformMatrix4fv(glGetUniformLocation(lineShader, "uViewProjMatrix"), 1, false, cameraParam.viewProj.data());
		glDrawArrays(GL_LINES, 0, (GLsizei)lineVertexData.size());

	}
	void Guizmo::Clear()
	{
		lineVertexData.clear();
		pointVertexData.clear();
		triangleVertexData.clear();
		//colorStack.clear();
		//alphaStack.clear();
		//sizeStack.clear();

		//matrixStack.clear();
	}
	bool Guizmo::MakeHot(unsigned int _id, float _depth, bool _intersects)
	{
		if (m_activeId == Id_Invalid && _depth < m_hotDepth && _intersects && !isKeyDown(Action_Select))
		{
			m_hotId = _id;
			m_appHotId = m_appId;
			m_hotDepth = _depth;

			return true;
		}

		return false;
	}
	void Guizmo::MakeActive(unsigned int _id)
	{
		m_activeId = _id;
		m_appActiveId = _id == Id_Invalid ? Id_Invalid : m_appId;
	}
	void Guizmo::ResetId()
	{
		m_activeId = m_hotId = m_appActiveId = m_appHotId = Id_Invalid;
		m_hotDepth = FLT_MAX;
	}
	unsigned int Guizmo::MakeId(const char* _str)
	{
		unsigned int ret = idStack.size();
		while (*_str)
		{
			ret ^= (unsigned int)*_str++;
			ret *= kFnv1aPrime32;
		}
		return ret;
	}
	void Guizmo::pushEnableSorting(bool _enable)
	{
		assert(m_primMode == PrimitiveMode_None); // can't change sort mode mid-primitive
		m_vertexDataIndex = _enable ? 1 : 0;
		enableSortingStack.push_back(_enable);
	}
	void Guizmo::popEnableSorting()
	{
		assert(m_primMode == PrimitiveMode_None); // can't change sort mode mid-primitive
		enableSortingStack.pop_back();
		m_vertexDataIndex = enableSortingStack.back() ? 1 : 0;
	}
	void Guizmo::setEnableSorting(bool _enable)
	{
		assert(m_primMode == PrimitiveMode_None); // can't change sort mode mid-primitive
		m_vertexDataIndex = _enable ? 1 : 0;
		enableSortingStack.back() = _enable;
	}
	void Guizmo::pushLayerId(unsigned int _layer)
	{
		assert(m_primMode == PrimitiveMode_None); // can't change layer mid-primitive
		int idx = findLayerIndex(_layer);
		if (idx == -1) // not found, push new layer
		{
			idx = m_layerIdMap.size();
			m_layerIdMap.push_back(_layer);
			for (int i = 0; i < DrawPrimitive_Count; ++i)
			{
				m_vertexData[0].push_back(new VertexList());
				*(m_vertexData[0].back()) = std::vector<VertexData>();
				m_vertexData[1].push_back(new VertexList());
				*(m_vertexData[1].back()) = std::vector<VertexData>();
			}
			//m_textData.push_back((TextList*)IM3D_MALLOC(sizeof(TextList)));
			//*m_textData.back() = TextList();
		}
		layerIdStack.push_back(_layer);
		m_layerIndex = idx;
	}
	void Guizmo::popLayerId()
	{
		assert(layerIdStack.size() > 1);
		layerIdStack.pop_back();
		m_layerIndex = findLayerIndex(layerIdStack.back());
	}
	Guizmo::~Guizmo()
	{
	}
	float Guizmo::pixelsToWorldSize(const Eigen::Vector3<float>& _position, float _pixels)
	{
		float d = cameraParam.orthProj ? 1.0f : (_position - cameraParam.eye).norm();
		return cameraParam.projectY * d * (_pixels / cameraParam.viewportHeight);
	}
	int Guizmo::findLayerIndex(unsigned int _id) const
	{
		for (int i = 0; i < (int)m_layerIdMap.size(); ++i)
		{
			if (m_layerIdMap[i] == _id)
			{
				return i;
			}
		}
		return -1;
	}
	VertexList* Guizmo::getCurrentVertexList()
	{
		return m_vertexData[m_vertexDataIndex][m_layerIndex * DrawPrimitive_Count + m_primType];

	}
	/*
	VertexList* Guizmo::getCurrentVertexList()
	{
		}
	*/

}






